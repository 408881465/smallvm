module main
variables _loop_overhead 'current index' sequence

	spec ' ' 'initialize letters' 'initialize sequence'
	spec 'r' 'correct guess' 'correct guess at _' 'auto' '10'
	spec 'r' 'wrong guess' 'wrong guess at _' 'auto' '10'
	spec ' ' 'play note at' 'play note at _' 'auto' '10'
	spec ' ' 'triangle up' 'draw  _' 'auto' 1

to 'correct guess' index {
  return (or (or (and ('up button') ((at index sequence) == 1)) (and ('down button') ((at index sequence) == 2))) (or (and ('left button') ((at index sequence) == 3)) (and ('right button') ((at index sequence) == 4))))
}

to 'initialize letters' {
  'play tone' 'C' 1 100
  'play tone' 'E' 1 100
  'play tone' 'G' 1 100
  'play tone' 'C' 2 100
  if (sequence == 0) {
    sequence = (newList 20)
  }
  for i (size sequence) {
    atPut i sequence (random 1 4)
  }
}

to 'play note at' index {
  'triangle up' index
  if ((at index sequence) == 1) {
    'play tone' 'E' 1 200
  } ((at index sequence) == 2) {
    'play tone' 'F#' 1 200
  } ((at index sequence) == 3) {
    'play tone' 'D' 1 200
  } else {
    'play tone' 'G' 1 200
  }
}

to 'triangle up' index {
  '[display:mbDisplayOff]'
  if ((at index sequence) == 1) {
    '[tft:triangle]' 0 0 63 63 126 0 (hexToInt '00FF00') true
  } ((at index sequence) == 2) {
    '[tft:triangle]' 0 126 63 63 126 126 (hexToInt 'FF0000') true
  } ((at index sequence) == 3) {
    '[tft:triangle]' 0 0 63 63 0 126 (hexToInt '0000FF') true
  } else {
    '[tft:triangle]' 126 0 63 63 126 126 (hexToInt '00FFFF') true
  }
}

to 'wrong guess' index {
  return (or (or (and ('up button') ((at index sequence) != 1)) (and ('down button') ((at index sequence) != 2))) (or (and ('left button') ((at index sequence) != 3)) (and ('right button') ((at index sequence) != 4))))
}

script 51 50 {
comment 'This is the Simon memory game for the
Citilab ED1 board'
}

script 254 121 {
whenBroadcastReceived 'player turn'
local 'index' 1
repeatUntil (index > (v 'current index')) {
  if ('correct guess' index) {
    'play note at' index
    index += 1
    waitUntil (and (and (not ('up button')) (not ('down button'))) (and (not ('left button')) (not ('right button'))))
  } ('wrong guess' index) {
    'play tone' 'G' 1 250
    'play tone' 'F#' 1 250
    'play tone' 'F' 1 250
    'play tone' 'E' 1 250
    waitMillis 500
    sendBroadcastSimple 'go!'
    stopTask
  }
}
waitMillis 500
'current index' += 1
sendBroadcastSimple 'play sequence'
}

script 52 123 {
whenStarted
sendBroadcastSimple 'go!'
}

script 1122 182 {
whenBroadcastReceived 'play sequence'
if ((v 'current index') > 20) {
  'play tone' 'C' 3 100
  'play tone' 'E' 2 100
  'play tone' 'C' 3 100
  'play tone' 'E' 2 100
  'play tone' 'C' 2 100
  'play tone' 'G' 2 100
  'play tone' 'C' 3 200
  waitMillis 500
  sendBroadcastSimple 'go!'
} else {
  for i (v 'current index') {
    'play note at' i
  }
  sendBroadcastSimple 'player turn'
}
}

script 52 224 {
whenBroadcastReceived 'go!'
'current index' = 1
'initialize letters'
waitMillis 1500
sendBroadcastSimple 'play sequence'
}


module 'ED1 Buttons' Input
variables _ED1_buttons_init '_capacitive threshold'

	spec ' ' '_ED1_buttons_init' '_ED1_buttons_init' 'any any any'
	spec 'r' 'OK button' 'button OK'
	spec 'r' 'cancel button' 'button X'
	spec 'r' 'up button' 'button up'
	spec 'r' 'down button' 'button down'
	spec 'r' 'left button' 'button left'
	spec 'r' 'right button' 'button right'
	spec ' ' 'set capacitive threshold to' 'set capacitive threshold to _' 'auto' 16

to 'OK button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 15) < (v '_capacitive threshold'))
}

to '_ED1_buttons_init' {
  if (_ED1_buttons_init == 0) {
    if ((v '_capacitive threshold') == 0) {'_capacitive threshold' = 16}
    _ED1_buttons_init = (booleanConstant true)
  }
}

to 'cancel button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 14) < (v '_capacitive threshold'))
}

to 'down button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 13) < (v '_capacitive threshold'))
}

to 'left button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 2) < (v '_capacitive threshold'))
}

to 'right button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 27) < (v '_capacitive threshold'))
}

to 'set capacitive threshold to' threshold {
  '_capacitive threshold' = threshold
}

to 'up button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 4) < (v '_capacitive threshold'))
}


module Tone Output
variables _tonePin _toneInitalized _toneLoopOverhead

	spec ' ' 'play tone' 'play note _ octave _ during _ ms' 'auto num num' 'C' 0 500
	spec ' ' 'play frequency' 'play frequency _ for _ milliseconds' 'num num' 261 500
	spec ' ' 'playMIDIKey' 'play midi key _ for _ milliseconds' 'num num' 60 500
	spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
	spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
	spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
	spec 'r' '_baseFreqForSharpOrFlat' '_baseFreqForSharpOrFlat _' 'auto' 'c#'
	spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
	spec ' ' '_toneLoop' '_toneLoop _ for _ milliseconds' 'num num' 440000 100

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  if (or (note == 'c') (note == 'C')) {
    return 261626
  } (or (note == 'd') (note == 'D')) {
    return 293665
  } (or (note == 'e') (note == 'E')) {
    return 329628
  } (or (note == 'f') (note == 'F')) {
    return 349228
  } (or (note == 'g') (note == 'G')) {
    return 391995
  } (or (note == 'a') (note == 'A')) {
    return 440000
  } (or (note == 'b') (note == 'B')) {
    return 493883
  }
  return ('_baseFreqForSharpOrFlat' note)
}

to '_baseFreqForSemitone' semitone {
  if (0 == semitone) {
    return 261626
  } (1 == semitone) {
    return 277183
  } (2 == semitone) {
    return 293665
  } (3 == semitone) {
    return 311127
  } (4 == semitone) {
    return 329628
  } (5 == semitone) {
    return 349228
  } (6 == semitone) {
    return 369994
  } (7 == semitone) {
    return 391995
  } (8 == semitone) {
    return 415305
  } (9 == semitone) {
    return 440000
  } (10 == semitone) {
    return 466164
  } (11 == semitone) {
    return 493883
  }
}

to '_baseFreqForSharpOrFlat' note {
  comment 'Return the frequency for the given sharp or flat note in the
middle-C octave scaled by 1000. Only handles black keys.
Thus, you can''t write E# to mean F.'
  if (or (or (note == 'c#') (note == 'C#')) (or (note == 'db') (note == 'Db'))) {
    return 277183
  } (or (or (note == 'd#') (note == 'D#')) (or (note == 'eb') (note == 'Eb'))) {
    return 311127
  } (or (or (note == 'f#') (note == 'F#')) (or (note == 'gb') (note == 'Gb'))) {
    return 369994
  } (or (or (note == 'g#') (note == 'G#')) (or (note == 'ab') (note == 'Ab'))) {
    return 415305
  } (or (or (note == 'a#') (note == 'A#')) (or (note == 'bb') (note == 'Bb'))) {
    return 466164
  }
  comment 'Unrecognized note names map to 0.1 Hz, which is inaudible.
This helps users find typos in their tunes.'
  return 100
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  '[display:mbDisplayOff]'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } else {
      _tonePin = 0
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' (key % 12))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

