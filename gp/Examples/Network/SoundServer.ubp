module main
author MicroBlocks
version 1 0 
description 'Play sound data streamed over the network or store it in a file to be played later.'
variables data bytesReceived contentsBytes 

	spec ' ' 'waitForHeaders' 'waitForHeaders'
	spec ' ' 'receiveMoreData' 'receiveData'
	spec ' ' 'playFromFile' 'playFromFile _' 'auto' 'File_Name'
	spec ' ' 'playSoundBuffer' 'playSoundBuffer _' 'auto' '10'

to playFromFile fileName {
  '[io:dacInit]' 25 11025
  '[file:open]' fileName
  repeatUntil ('[file:endOfFile]' fileName) {
    playSoundBuffer ('[file:readBytes]' 800 fileName)
  }
}

to playSoundBuffer buffer {
  local 'i' 1
  repeatUntil (i > (size buffer)) {
    i += ('[io:dacWrite]' buffer i)
  }
}

to receiveMoreData {
  local 'buf' ('[net:httpServerGetRequest]' true)
  data = ('[data:join]' data buf)
  bytesReceived += (size buf)
}

to waitForHeaders {
  comment 'Receive data until we find the end of the HTTP
headers (the byte sequence CR-LF-CR-LF).'
  data = ('[data:newByteArray]' 0)
  bytesReceived = 0
  repeatUntil (('_endOfHeader' data) > 0) {
    receiveMoreData
    waitMillis 100
  }
}

script 54 50 {
whenStarted
comment 'Fill in the name and password for your WiFi network:'
'wifi connect to' 'Network_Name' '' 3
comment 'Fill in the file name to store the sound into a file.
Once it is downloaded, you can play the file using
the playFromFile block (in My Blocks).
Leave the file name blank to play the sound as it
is received.'
local 'fileName' ''
forever {
  waitForHeaders
  if (fileName != '') {
    '[file:delete]' fileName
    '[file:open]' fileName
    sayIt 'Storing sound in file' fileName
  } else {
    '[io:dacInit]' 25 11025
    sayIt 'Playing sound...'
  }
  contentsBytes = ('content length of request' data)
  data = ('body of request' data)
  bytesReceived = (size data)
  repeatUntil (and (bytesReceived >= contentsBytes) ((size data) == 0)) {
    receiveMoreData
    if (fileName != '') {
      '[file:appendBytes]' data fileName
    } else {
      playSoundBuffer data
    }
    data = ('[data:newByteArray]' 0)
  }
  '[file:close]' 'sound'
  '[net:respondToHttpRequest]' '200 OK'
  sayIt bytesReceived 'content bytes received'
}
}


module Files Data
author MicroBlocks
version 1 0 
tags data esp 
description 'Flash file system operations. Currently supports the SPIFFS file system on ESP8266 and ESP32 boards.'

	spec ' ' '[file:open]' 'open file _' 'str'
	spec ' ' '[file:close]' 'close file _' 'str'
	spec ' ' '[file:delete]' 'delete file _' 'str'
	spec ' ' '[file:appendLine]' 'append line _ to file _' 'str str'
	spec ' ' '[file:appendBytes]' 'append bytes _ to file _' 'str str'
	spec 'r' '[file:endOfFile]' 'end of file _' 'str'
	spec 'r' '[file:readLine]' 'next line of file _' 'str'
	spec 'r' '[file:readBytes]' 'next _ bytes of file _ : starting at _' 'num str num' 100 '' 0
	spec 'r' 'file names' 'file names'
	spec 'r' '[file:fileSize]' 'size of file _' 'str'
	spec 'r' '[file:systemInfo]' 'file system info'

to 'file names' {
  '[file:startList]'
  local 'result' ('[data:makeList]')
  local 'fileName' ('[file:nextInList]')
  repeatUntil (fileName == '') {
    '[data:addLast]' fileName result
    fileName = ('[file:nextInList]')
  }
  return result
}


module 'HTTP server' Comm
author MicroBlocks
version 1 2 
depends WiFi 
tags http network 
description 'Create an HTTP server in MicroBlocks. You can use this library to allow remote control for your Wifi-enabled board.'

	spec 'r' '[net:httpServerGetRequest]' 'HTTP server request : binary data _' 'bool' false
	spec 'r' 'request method' 'method of request _' 'str' ''
	spec 'r' 'path of request' 'path of request _' 'str' ''
	spec 'r' 'header of request' 'headers of request _' 'str' ''
	spec 'r' 'body of request' 'body of request _' 'str' ''
	spec 'r' 'content length of request' 'content length of request _' 'str' ''
	spec ' ' '[net:respondToHttpRequest]' 'respond _ to HTTP request : with body _ : and headers _' 'str str str' '200 OK' 'Welcome to the MicroBlocks HTTP server' 'Content-Type: text/plain'
	spec 'r' '_endOfHeader' '_end of header of request _' 'str'
	spec 'r' '_toString' '_toString _' 'auto' 'abc'

to '_endOfHeader' request {
  return ('[data:find]' ('[data:unicodeString]' ('[data:makeList]' 13 10 13 10)) request)
}

to '_toString' aStringOrByteArray {
  comment 'If argument is a byte array, convert it to a string. '
  if (not (isType aStringOrByteArray 'string')) {
    aStringOrByteArray = ('[data:join]' '' aStringOrByteArray)
  }
  return aStringOrByteArray
}

to 'body of request' request {
  i = ('_endOfHeader' request)
  if (i < 0) {
    return ''
  }
  return ('[data:copyFromTo]' request (i + 4))
}

to 'content length of request' request {
  local 'i' ('_endOfHeader' request)
  if (i < 0) {
    return 0
  }
  local 'j' ('[data:find]' 'Content-Length: ' request)
  if (j < 0) {
    comment 'Try alternate capitalization'
    j = ('[data:find]' 'Content-length: ' request)
  }
  if (or (j < 0) (j > i)) {
    return 0
  }
  j += 16
  local 'k' ('[data:find]' ('[data:unicodeString]' 13) request j)
  return (('[data:copyFromTo]' request j (k - 1)) + 0)
}

to 'header of request' request {
  i = ('_endOfHeader' request)
  if (i < 0) {
    return ''
  }
  return ('_toString' ('[data:copyFromTo]' request 1 (i - 1)))
}

to 'path of request' request {
  return ('_toString' ('[data:copyFromTo]' request (('[data:find]' ' ' request) + 1) (('[data:find]' ' HTTP' request) - 1)))
}

to 'request method' request {
  return ('_toString' ('[data:copyFromTo]' request 1 (('[data:find]' ' ' request) - 1)))
}


module 'Sound Primitives' Output
author MicroBlocks
version 1 0 
tags tone sound music audio note speaker 
description 'Low level support for tone generation and DAC audio output on selected boards. You are probably looking for the Tone library in the folder above. The tone primitives use the Arduino tone library to provide smoother music output. The DAC primitives are currently supported only on ESP32 boards.'

	spec 'r' '[io:hasTone]' 'has tone support'
	spec ' ' '[io:playTone]' 'play tone pin _ frequency _' 'num num' 0 440
	spec ' ' '[io:dacInit]' 'init DAC pin _ sample rate _' 'num num' 25 11025
	spec 'r' '[io:dacWrite]' 'DAC write _ : starting at _' 'num num' 128 1

module WiFi Comm
author MicroBlocks
version 1 2 
tags communication network 
description 'Connect to a WiFi network. To be used in conjunction with other network libraries, such as HTTP client, HTTP server or Web Thing.
'

	spec ' ' 'wifi connect to' 'wifi connect to _ password _ try _ times' 'str str num' 'Network_Name' '' 3
	spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
	spec 'r' 'getIPAddress' 'IP address'

to getIPAddress {
  return ('[net:myIPAddress]')
}

to 'wifi connect to' ssid password tries {
  if (not ('[net:hasWiFi]')) {return}
  repeatUntil (or ('Connected' == ('[net:wifiStatus]')) (tries < 1)) {
    '[net:startWiFi]' ssid password
    repeatUntil ('Trying...' != ('[net:wifiStatus]')) {
      comment 'Slow blink while connecting'
      setUserLED true
      waitMillis 500
      setUserLED false
      waitMillis 500
    }
    tries += -1
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  repeatUntil ('Connected' == ('[net:wifiStatus]')) {
    comment 'Slow blink while connecting'
    setUserLED true
    waitMillis 500
    setUserLED false
    waitMillis 500
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

