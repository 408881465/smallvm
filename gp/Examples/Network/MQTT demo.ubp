module main
author wwj718
version 1 0 
description ''
variables event 

script 120 40 {
whenStarted
comment '1. connect wifi'
'wifi connect to' '' '' 3
waitMillis 1000
comment '2. connect MQTT broker'
'MQTT connect to' 'public.cloud.shiftr.io' 128 'MicroBlocks_client' 'public' 'public'
}

script 50 269 {
comment 'subscribe topic'
'MQTT sub' 'testTopic'
}

script 367 270 {
comment 'publish topic payload'
'MQTT pub' 'testTopic' 'Hello!'
}

script 110 366 {
comment 'receive mqtt message'
forever {
  if ('MQTT connected') {
    event = ('last MQTT event')
    if (isType event 'list') {
      sayIt 'topic' ('MQTT event topic' event) ', payload' ('MQTT event payload' event)
    }
  } else {
    sayIt 'try to connect ...'
    waitMillis 500
    'MQTT connect to' 'public.cloud.shiftr.io' 128 'MicroBlocks_client' 'public' 'public'
  }
}
}


module MQTT Comm
author wwj718
version 1 1 
depends WiFi 
tags websockets network 
description 'A simple MQTT client.'

	spec ' ' 'MQTT connect to' 'MQTT connect to broker _ : buffer sizes _ client id _ : username _ password _' 'str num auto str str' '' 128 'MicroBlocks_client' '' ''
	spec 'r' 'MQTT connected' 'MQTT connected'
	spec ' ' 'MQTT sub' 'MQTT sub _' 'str' 'testTopic'
	spec ' ' 'MQTT unsub' 'MQTT unsub _' 'str' 'testTopic'
	spec ' ' 'MQTT pub' 'MQTT pub topic _ payload _' 'str str' 'testTopic' 'Hello!'
	spec 'r' 'last MQTT event' 'last MQTT event'
	spec 'r' 'MQTT event topic' 'topic for MQTT event _' 'str' ''
	spec 'r' 'MQTT event payload' 'payload for MQTT event _' 'str' ''

to 'MQTT connect to' broker buffer_sizes client_id username password {
  if ((getIPAddress) != '0.0.0.0') {
    if ((pushArgCount) == 1) {
      callCustomCommand '[net:MQTTConnect]' ('[data:makeList]' broker 128 'MicroBlocks_client')
    } ((pushArgCount) == 3) {
      callCustomCommand '[net:MQTTConnect]' ('[data:makeList]' broker buffer_sizes client_id)
    } else {
      callCustomCommand '[net:MQTTConnect]' ('[data:makeList]' broker buffer_sizes client_id username password)
    }
    if ('MQTT connected') {
      sayIt 'Connected!'
    } else {
      sayIt 'Not Connected'
    }
  } else {
    sayIt 'Not Connected'
  }
}

to 'MQTT connected' {
  return (callCustomReporter '[net:MQTTIsConnected]')
}

to 'MQTT event payload' event {
  if (and (isType event 'list') ((size event) > 1)) {
    return (at 2 event)
  } else {
    return ''
  }
}

to 'MQTT event topic' event {
  if (and (isType event 'list') ((size event) > 1)) {
    return (at 1 event)
  } else {
    return ''
  }
}

to 'MQTT pub' topic payload {
  if ('MQTT connected') {
    if ((callCustomReporter '[net:MQTTPub]' ('[data:makeList]' topic payload)) == (booleanConstant true)) {
      sayIt 'pub success!'
    } else {
      sayIt 'pub failure!'
    }
    callCustomCommand '[net:MQTTPub]' ('[data:makeList]' topic payload)
  } else {
    sayIt 'Not Connected'
  }
}

to 'MQTT sub' topic {
  if ('MQTT connected') {
    if ((callCustomReporter '[net:MQTTSub]' ('[data:makeList]' topic)) == (booleanConstant true)) {
      sayIt 'sub success!'
    } else {
      sayIt 'sub failure!'
    }
  } else {
    sayIt 'Not Connected'
  }
}

to 'MQTT unsub' topic {
  if ('MQTT connected') {
    if ((callCustomReporter '[net:MQTTUnsub]' ('[data:makeList]' topic)) == (booleanConstant true)) {
      sayIt 'unsub success!'
    } else {
      sayIt 'unsub failure!'
    }
  } else {
    sayIt 'Not Connected'
  }
}

to 'last MQTT event' {
  if ('MQTT connected') {
    return (callCustomReporter '[net:MQTTLastEvent]')
  } else {
    return (booleanConstant false)
  }
}


module WiFi Comm
author MicroBlocks
version 1 3 
tags communication network 
description 'Connect to a WiFi network. To be used in conjunction with other network libraries, such as HTTP client, HTTP server or Web Thing.
'

	spec ' ' 'wifi connect to' 'wifi connect to _ password _ try _ times : IP _ gateway _ subnet _' 'str str num str str str' 'Network_Name' '' 3 '192.168.1.42' '192.168.1.1' '255.255.255.0'
	spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
	spec 'r' 'getIPAddress' 'IP address'
	spec 'r' '[net:myMAC]' 'MAC address'

to getIPAddress {
  return ('[net:myIPAddress]')
}

to 'wifi connect to' ssid password tries fixedIP gatewayIP subnetIP {
  local 'ip' fixedIP
  local 'gateway' gatewayIP
  local 'subnet' subnetIP
  if (not ('[net:hasWiFi]')) {
    return
  }
  if ((pushArgCount) < 3) {
    ip = ''
    gateway = ''
    subnet = ''
  }
  '[net:stopWiFi]'
  repeatUntil (or ('Connected' == ('[net:wifiStatus]')) (tries < 1)) {
    '[net:startWiFi]' ssid password false ip gateway subnet
    repeatUntil ('Trying...' != ('[net:wifiStatus]')) {
      comment 'Slow blink while connecting'
      setUserLED true
      waitMillis 500
      setUserLED false
      waitMillis 500
    }
    tries += -1
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  waitMillis 1000
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  repeatUntil ('Connected' == ('[net:wifiStatus]')) {
    comment 'Slow blink while connecting'
    setUserLED true
    waitMillis 500
    setUserLED false
    waitMillis 500
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  waitMillis 1000
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

