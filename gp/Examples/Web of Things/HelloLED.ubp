module main
author unknown
version 1 0 
description ''
variables _np_pixels _useWiFi on 

	spec ' ' 'cpx-LEDs' 'cpx-LEDs'
	spec ' ' 'microbit-LEDs' 'microbit-LEDs'

to 'cpx-LEDs' {
  if on {
    setNeoPixelColors10 (colorSwatch 191 63 4 255) (colorSwatch 191 119 4 255) (colorSwatch 179 191 11 255) (colorSwatch 56 191 1 255) (colorSwatch 4 191 146 255) (colorSwatch 2 128 191 255) (colorSwatch 4 23 191 255) (colorSwatch 57 2 191 255) (colorSwatch 191 4 138 255) (colorSwatch 191 1 7 255)
  } else {
    clearNeoPixels
  }
}

to 'microbit-LEDs' {
  if on {
    setUserLED true
    '[display:mbDisplay]' 15728622
  } else {
    setUserLED false
    '[display:mbDisplayOff]'
  }
}

script 51 50 {
comment 'This example lets you control the built-in LEDs of a board, much as you
might control a smart bulb using the WebThings Gateway UI.'
}

script 535 74 {
to 'microbit-LEDs' {}
}

script 54 129 {
whenStarted
'wifi connect to' 'Network_Name' '' 3
'set thing name to' 'Hello LED'
'set thing capability to' 'Light'
addBooleanProperty 'on' 'On' 'OnOffProperty'
'start WebThing server'
setUserLED true
waitMillis 500
setUserLED false
on = (booleanConstant false)
forever {
  if (or ((boardType) == 'CircuitPlayground') ((boardType) == 'CircuitPlayground Bluefruit')) {
    'cpx-LEDs'
  } else {
    'microbit-LEDs'
  }
  waitMillis 50
}
}

script 247 265 {
whenButtonPressed 'A'
comment 'To test, click to toggle the LED.'
on = (not on)
}

script 424 366 {
to 'cpx-LEDs' {}
}

script 346 609 {
comment 'Check thing description'
sayIt ('thing description JSON')
}

script 71 611 {
comment 'Click to check IP address'
sayIt (getIPAddress)
}


module 'HTTP server' Comm
author MicroBlocks
version 1 2 
depends WiFi 
tags http network 
description 'Create an HTTP server in MicroBlocks. You can use this library to allow remote control for your Wifi-enabled board.'

	spec 'r' '[net:httpServerGetRequest]' 'HTTP server request : binary data _' 'bool' false
	spec 'r' 'request method' 'method of request _' 'str' ''
	spec 'r' 'path of request' 'path of request _' 'str' ''
	spec 'r' 'headers of request' 'headers of request _' 'str' ''
	spec 'r' 'body of request' 'body of request _' 'str' ''
	spec 'r' 'content length of request' 'content length of request _' 'str' ''
	spec ' ' '[net:respondToHttpRequest]' 'respond _ to HTTP request : with body _ : and headers _' 'str str str' '200 OK' 'Welcome to the MicroBlocks HTTP server' 'Content-Type: text/plain'
	spec 'r' '_endOfHeaders' '_end of headers _' 'str'
	spec 'r' '_toString' '_toString _' 'auto' 'abc'

to '_endOfHeaders' request {
  return ('[data:find]' ('[data:unicodeString]' ('[data:makeList]' 13 10 13 10)) request)
}

to '_toString' aStringOrByteArray {
  comment 'If argument is a byte array, convert it to a string. '
  if (not (isType aStringOrByteArray 'string')) {
    aStringOrByteArray = ('[data:join]' '' aStringOrByteArray)
  }
  return aStringOrByteArray
}

to 'body of request' request {
  i = ('_endOfHeaders' request)
  if (i < 0) {
    return ''
  }
  return ('[data:copyFromTo]' request (i + 4))
}

to 'content length of request' request {
  local 'i' ('_endOfHeaders' request)
  if (i < 0) {
    return 0
  }
  local 'j' ('[data:find]' 'Content-Length: ' request)
  if (j < 0) {
    comment 'Try alternate capitalization'
    j = ('[data:find]' 'Content-length: ' request)
  }
  if (or (j < 0) (j > i)) {
    return 0
  }
  j += 16
  local 'k' ('[data:find]' ('[data:unicodeString]' 13) request j)
  return (('[data:copyFromTo]' request j (k - 1)) + 0)
}

to 'headers of request' request {
  i = ('_endOfHeaders' request)
  if (i < 0) {
    return ''
  }
  return ('_toString' ('[data:copyFromTo]' request 1 (i - 1)))
}

to 'path of request' request {
  return ('_toString' ('[data:copyFromTo]' request (('[data:find]' ' ' request) + 1) (('[data:find]' ' HTTP' request) - 1)))
}

to 'request method' request {
  return ('_toString' ('[data:copyFromTo]' request 1 (('[data:find]' ' ' request) - 1)))
}


module 'LED Display' Output
author MicroBlocks
version 1 0 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) also support this primitives in a simulated "fat pixel" display.'

	spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237450
	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
	spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
	spec ' ' 'displayCharacter' 'display character _' 'str' 'A'

to displayCharacter s {
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}


module NeoPixel Output
author MicroBlocks
version 1 2 
tags led strip rgb string ws2812 
description 'Control NeoPixel (WS2812) RGB LED strips.
'
variables _np_pixels 

	spec ' ' 'neoPixelAttach' 'attach _ LED NeoPixel strip to pin _ : has white _' 'num auto bool' 10 '' false
	spec ' ' 'setNeoPixelColors10' 'set NeoPixels _ _ _ _ _ _ _ _ _ _' 'color color color color color color color color color color'
	spec ' ' 'clearNeoPixels' 'clear NeoPixels'
	spec ' ' 'neoPixelSetAllToColor' 'set all NeoPixels color _' 'color'
	spec ' ' 'setNeoPixelColor' 'set NeoPixel _ color _' 'num color' 1
	spec ' ' 'rotateNeoPixelsBy' 'rotate NeoPixels by _' 'auto' 1
	spec 'r' 'colorFromRGB' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
	spec 'r' 'randomColor' 'random color'
	spec ' ' '_NeoPixel_ensureInitialized' '_NeoPixel_ensureInitialized'
	spec ' ' '_NeoPixel_rotate' '_NeoPixel_rotate_left _' 'bool' true
	spec ' ' '_NeoPixel_update' '_NeoPixel_update'

to '_NeoPixel_ensureInitialized' {
  if (_np_pixels == 0) {if ((boardType) == 'M5Atom-Matrix') {
    neoPixelAttach 25 '' false
  } ((boardType) == 'D1-Mini') {
    comment 'D1 mini kit'
    neoPixelAttach 7 15 false
  } else {
    neoPixelAttach 10 '' false
  }}
}

to '_NeoPixel_rotate' left {
  '_NeoPixel_ensureInitialized'
  local 'length' (size _np_pixels)
  if left {
    local 'first' (at 1 _np_pixels)
    for i (length - 1) {
      atPut i _np_pixels (at (i + 1) _np_pixels)
    }
    atPut length _np_pixels first
  } else {
    local 'last' (at length _np_pixels)
    for i (length - 1) {
      atPut ((length - i) + 1) _np_pixels (at (length - i) _np_pixels)
    }
    atPut 1 _np_pixels last
  }
}

to '_NeoPixel_update' {
  '[display:neoPixelSend]' _np_pixels
  waitMicros 100
}

to clearNeoPixels {
  '_NeoPixel_ensureInitialized'
  fillList _np_pixels 0
  '_NeoPixel_update'
}

to colorFromRGB r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to neoPixelAttach number pinNumber optionalHasWhite {
  hasWhite = false
  if ((pushArgCount) > 2) {
    hasWhite = optionalHasWhite
  }
  if (or (_np_pixels == 0) (number != (size _np_pixels))) {
    _np_pixels = (newList number)
  }
  fillList _np_pixels 0
  '[display:neoPixelSetPin]' pinNumber hasWhite
}

to neoPixelSetAllToColor color {
  '_NeoPixel_ensureInitialized'
  fillList _np_pixels color
  '_NeoPixel_update'
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to rotateNeoPixelsBy n {
  '_NeoPixel_ensureInitialized'
  repeat (absoluteValue n) {
    '_NeoPixel_rotate' (n > 0)
  }
  '_NeoPixel_update'
}

to setNeoPixelColor i color {
  '_NeoPixel_ensureInitialized'
  if (and (1 <= i) (i <= (size _np_pixels))) {
    atPut i _np_pixels color
    '_NeoPixel_update'
  }
}

to setNeoPixelColors10 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 {
  '_NeoPixel_ensureInitialized'
  if ((size _np_pixels) >= 1) {
    atPut 1 _np_pixels c1
  }
  if ((size _np_pixels) >= 2) {
    atPut 2 _np_pixels c2
  }
  if ((size _np_pixels) >= 3) {
    atPut 3 _np_pixels c3
  }
  if ((size _np_pixels) >= 4) {
    atPut 4 _np_pixels c4
  }
  if ((size _np_pixels) >= 5) {
    atPut 5 _np_pixels c5
  }
  if ((size _np_pixels) >= 6) {
    atPut 6 _np_pixels c6
  }
  if ((size _np_pixels) >= 7) {
    atPut 7 _np_pixels c7
  }
  if ((size _np_pixels) >= 8) {
    atPut 8 _np_pixels c8
  }
  if ((size _np_pixels) >= 9) {
    atPut 9 _np_pixels c9
  }
  if ((size _np_pixels) >= 10) {
    atPut 10 _np_pixels c10
  }
  '_NeoPixel_update'
}


module 'Web Thing' Comm
author MicroBlocks
version 3 3 
depends 'HTTP server' WiFi 
tags iot webthing wot 
description 'Build Web Things as specified by the WebThing protocol. If your board is Wifi enabled, you can serve its WebThing description right away. Otherwise, you can use the MicroBlocks connector for the Web of Things gateway.'
variables _WoT_title _WoT_events _WoT_capability _WoT_event_defs _WoT_property_defs '_thing description' 

	spec ' ' 'set thing name to' 'set thing name to _' 'auto' 'MicroBlocks thing'
	spec ' ' 'set thing capability to' 'set thing capability to _' 'str.thingTypesMenu' 'Light'
	spec ' ' 'addBooleanProperty' 'set boolean property _ title _ @Type _ : read only _' 'menu.allVarsMenu str str.booleanPropertyTypesMenu bool' '' '' 'OnOffProperty' false
	spec ' ' 'addStringProperty' 'set string property _ title _ @Type _ : read only _' 'menu.allVarsMenu str str.stringPropertyTypesMenu bool' '' '' 'ColorProperty' false
	spec ' ' 'addNumProp' 'set number property _ title _ min _ max _ @Type _ : read only _' 'menu.allVarsMenu str num num str.numberPropertyTypesMenu bool' '' '' 0 100 'LevelProperty' false
	spec ' ' 'register event' 'register event _ type _' 'auto str.thingEventTypesMenu' 'Button A pressed' 'PressedEvent'
	spec ' ' 'start WebThing server' 'start WebThing server'
	spec ' ' 'trigger event' 'trigger event _' 'auto' 'button pressed'
	spec 'r' 'thing description JSON' 'thing description JSON'
	spec 'r' 'properties JSON' 'properties JSON'
	spec 'r' 'event definitions JSON' 'event definitions JSON'
	spec 'r' 'events JSON' 'events JSON'
	spec ' ' '_process OPTIONS request' '_process OPTIONS request _' 'auto' ''
	spec ' ' '_process PUT request' '_process PUT request _' 'auto' ''
	spec ' ' '_process request' '_process GET request _' 'auto' ''
	spec ' ' '_respond 404 Not Found' '_respond 404 Not Found'
	spec 'r' '_JSON value' '_JSON value _' 'auto' '10'
	spec 'r' '_parse JSON value' '_parse JSON value _' 'auto' ''
	spec 'r' '_trimmed' '_trimmed _' 'auto' '  hello    '
	spec ' ' '_WoT_start_server' '_WoT_start_server'
	spec 'r' '_type of' '_type of _' 'auto' '10'
	spec ' ' '_add or replace property' '_add or replace property _ attributes _' 'menu.nil str' '' ''
	spec ' ' '_clear thing description' '_clear thing description'
	spec 'r' '_varNames' '_varNames'

to '_JSON value' value {
  local 'JSON value' ''
  if (isType value 'string') {
    'JSON value' = ('[data:join]' '"' value '"')
  } (isType value 'list') {
    'JSON value' = '['
    for item value {
      'JSON value' = ('[data:join]' (v 'JSON value') ('_JSON value' item) ',')
    }
    'JSON value' = ('[data:join]' ('[data:copyFromTo]' (v 'JSON value') 1 ((size (v 'JSON value')) - 1)) ']')
  } (isType value 'boolean') {
    if value {
      'JSON value' = 'true'
    } else {
      'JSON value' = 'false'
    }
  } else {
    'JSON value' = value
  }
  return (v 'JSON value')
}

to '_WoT_start_server' {
  local 'request' ''
  forever {
    request = ('[net:httpServerGetRequest]')
    if (request != '') {
      if (('request method' request) == 'GET') {
        '_process request' request
      } (('request method' request) == 'PUT') {
        '_process PUT request' request
      } (('request method' request) == 'OPTIONS') {
        '_process OPTIONS request' request
      } else {
        '_respond 404 Not Found'
      }
    }
    waitMillis 50
  }
}

to '_add or replace property' varName 'attributes JSON' {
  if (_WoT_property_defs == 0) {_WoT_property_defs = ('[data:makeList]')}
  for def _WoT_property_defs {
    if ((at 1 def) == varName) {
      atPut 2 def (v 'attributes JSON')
      return ''
    }
  }
  '[data:addLast]' ('[data:makeList]' varName (v 'attributes JSON')) _WoT_property_defs
}

to '_clear thing description' {
  '_thing description' = 0
}

to '_parse JSON value' JSON {
  local 'value' ('_trimmed' JSON)
  if ((at 1 value) == '[') {
    comment 'Doesn''t handle multi-dimensional lists'
    local 'list' ('[data:makeList]')
    value = ('[data:copyFromTo]' value 2 ((size value) - 1))
    local 'comma index' ('[data:find]' ',' value)
    repeatUntil ((v 'comma index') == -1) {
      '[data:addLast]' ('_parse JSON value' ('[data:copyFromTo]' value 1 ((v 'comma index') - 1))) list
      value = ('[data:copyFromTo]' value ((v 'comma index') + 1))
      'comma index' = ('[data:find]' ',' value)
    }
    '[data:addLast]' ('_parse JSON value' value) list
    value = list
  } else {
    value = ('[misc:jsonGet]' value '')
  }
  return value
}

to '_process OPTIONS request' req {
  local 'path' ('path of request' req)
  '[net:respondToHttpRequest]' '200 OK' '' 'Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: PUT, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type'
}

to '_process PUT request' req {
  local 'path' ('path of request' req)
  if (('[data:find]' '/properties/' path) > 0) {
    local 'varName' ('[data:copyFromTo]' path 13)
    if ('[vars:varExists]' varName) {
      local 'body' ('body of request' req)
      '[vars:setVarNamed]' varName ('_parse JSON value' ('[data:copyFromTo]' body (('[data:find]' ':' body) + 1) (('[data:find]' '}' body) - 1)))
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"' varName '":' ('_JSON value' ('[vars:varNamed]' varName)) '}') 'Content-Type: application/json'
    } else {
      '_respond 404 Not Found'
    }
  } else {
    '_respond 404 Not Found'
  }
}

to '_process request' req {
  local 'path' ('path of request' req)
  if (path == '/') {
    '[net:respondToHttpRequest]' '200 OK' ('thing description JSON') 'Content-Type: application/json'
  } (or (path == '/properties') (path == '/properties/')) {
    '[net:respondToHttpRequest]' '200 OK' ('properties JSON') 'Content-Type: application/json'
  } (('[data:find]' '/properties/' path) > 0) {
    local 'varName' ('[data:copyFromTo]' path 13)
    if ('[vars:varExists]' varName) {
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"' varName '":' ('_JSON value' ('[vars:varNamed]' varName)) '}') 'Content-Type: application/json'
    } else {
      '_respond 404 Not Found'
    }
  } (or (path == '/events') (path == '/events/')) {
    '[net:respondToHttpRequest]' '200 OK' ('events JSON') 'Content-Type: application/json'
    _WoT_events = ('[data:makeList]')
  } else {
    '_respond 404 Not Found'
  }
}

to '_respond 404 Not Found' {
  '[net:respondToHttpRequest]' '404 Not Found' '{ "error":"Resource not found" }' 'Content-Type: application/json'
}

to '_trimmed' string {
  comment 'remove surrounding spaces'
  repeatUntil ((at 1 string) != ' ') {
    string = ('[data:copyFromTo]' string 2)
  }
  repeatUntil ((at 'last' string) != ' ') {
    string = ('[data:copyFromTo]' string 1 ((size string) - 1))
  }
  return string
}

to '_type of' value {
  if (isType value 'number') {
    return 'number'
  } (isType value 'list') {
    return 'array'
  } (isType value 'string') {
    return 'string'
  } (isType value 'boolean') {
    return 'boolean'
  }
  comment 'should never happen'
  return 'null'
}

to '_varNames' {
  local 'result' ('[data:makeList]')
  local 'count' ('[vars:varNameForIndex]' -1)
  for i count {
    local 'varName' ('[vars:varNameForIndex]' i)
    if (isType varName 'string') {
      '[data:addLast]' varName result
    }
  }
  return result
}

to addBooleanProperty varName title type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 3) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName ('[data:join]' '"title":"' title '","type":"boolean","@type":"' type '",' '"readOnly":' readonly)
}

to addNumProp varName title min max type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 5) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName ('[data:join]' '"title":"' title '","type":"number","@type":"' type '",' '"readOnly":' readonly ',"minimum":' min ',"maximum":' max)
}

to addStringProperty varName title type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 3) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName ('[data:join]' '"title":"' title '","type":"string","@type":"' type '",' '"readOnly":' readonly)
}

to 'event definitions JSON' {
  local 'JSON' '{'
  if (_WoT_event_defs == 0) {
    _WoT_event_defs = ('[data:makeList]')
  }
  for 'event def' _WoT_event_defs {
    JSON = ('[data:join]' JSON '"' (at 1 (v 'event def')) '":{"description":"MicroBlocks event","@type":"' (at 2 (v 'event def')) '"},')
  }
  if ((size JSON) > 1) {
    return ('[data:join]' ('[data:copyFromTo]' JSON 1 ((size JSON) - 1)) '}')
  } else {
    return '{}'
  }
}

to 'events JSON' {
  local 'JSON' '['
  for event _WoT_events {
    JSON = ('[data:join]' JSON '{"' (at 1 event) '":{"data":{"id":' (at 2 event) '}}},')
  }
  if ((size JSON) > 1) {
    return ('[data:join]' ('[data:copyFromTo]' JSON 1 ((size JSON) - 1)) ']')
  } else {
    return '[]'
  }
}

to 'properties JSON' {
  local 'JSON' '{'
  if (or (_WoT_property_defs == 0) ((size _WoT_property_defs) == 0)) {
    for varName ('_varNames') {
      if (not ((at 1 varName) == '_')) {
        local 'value' ('[vars:varNamed]' varName)
        JSON = ('[data:join]' JSON '"' varName '":{"title":"' varName '","type":"' ('_type of' value) '","links":[{"href":"/properties/' varName '"}],"@type":""},')
      }
    }
  } else {
    for 'property def' _WoT_property_defs {
      local 'varName' (at 1 (v 'property def'))
      JSON = ('[data:join]' JSON '"' varName '":{"links":[{"href":"/properties/' varName '"}],' (at 2 (v 'property def')) '},')
    }
  }
  if ((at 'last' JSON) == ',') {
    JSON = ('[data:copyFromTo]' JSON 1 ((size JSON) - 1))
  }
  return ('[data:join]' JSON '}')
}

to 'register event' 'event title' 'event type' {
  local 'event def' ('[data:makeList]' (v 'event title') (v 'event type'))
  if (_WoT_event_defs == 0) {
    _WoT_event_defs = ('[data:makeList]')
  }
  for def _WoT_event_defs {
    if ((at 1 def) == (v 'event title')) {
      atPut 2 def (v 'event type')
      return ''
    }
  }
  '[data:addLast]' (v 'event def') _WoT_event_defs
}

to 'set thing capability to' capability {
  _WoT_capability = capability
}

to 'set thing name to' title {
  _WoT_title = title
}

to 'start WebThing server' {
  if (_WoT_title == 0) {'set thing name to' 'MicroBlocks thing'}
  if (_WoT_capability == 0) {'set thing capability to' ''}
  if ('[net:hasWiFi]') {
    if (_WoT_events == 0) {_WoT_events = ('[data:makeList]')}
    sendBroadcast '_WoT_start_server'
  } else {
    '_thing description' = ('thing description JSON')
  }
}

to 'thing description JSON' {
  return ('[data:join]' '{"title":"' _WoT_title '","@context":"https://iot.mozilla.org/schemas/","@type":["' _WoT_capability '"],"links":[{"rel":"events","href":"/events"},{"rel":"properties","href":"/properties"}],"properties":' ('properties JSON') ',"events":' ('event definitions JSON') '}')
}

to 'trigger event' 'event name' {
  if ('[net:hasWiFi]') {
    '[data:addLast]' ('[data:makeList]' (v 'event name') (millisOp)) _WoT_events
  } else {
    sendBroadcast (v 'event name')
  }
}


module WiFi Comm
author MicroBlocks
version 1 2 
tags communication network 
description 'Connect to a WiFi network. To be used in conjunction with other network libraries, such as HTTP client, HTTP server or Web Thing.
'

	spec ' ' 'wifi connect to' 'wifi connect to _ password _ try _ times' 'str str num' 'Network_Name' '' 3
	spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
	spec 'r' 'getIPAddress' 'IP address'

to getIPAddress {
  return ('[net:myIPAddress]')
}

to 'wifi connect to' ssid password tries {
  if (not ('[net:hasWiFi]')) {return}
  repeatUntil (or ('Connected' == ('[net:wifiStatus]')) (tries < 1)) {
    '[net:startWiFi]' ssid password
    repeatUntil ('Trying...' != ('[net:wifiStatus]')) {
      comment 'Slow blink while connecting'
      setUserLED true
      waitMillis 500
      setUserLED false
      waitMillis 500
    }
    tries += -1
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  repeatUntil ('Connected' == ('[net:wifiStatus]')) {
    comment 'Slow blink while connecting'
    setUserLED true
    waitMillis 500
    setUserLED false
    waitMillis 500
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

