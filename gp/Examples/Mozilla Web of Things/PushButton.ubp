module main
variables _WoT_definingEvents _useWiFi

script 189 50 {
comment 'Mozila Web of Things pushbutton example.

To test it, either press, long-press or double-press the A button
in your board and look at the display.'
}

script 50 129 {
whenButtonPressed 'A'
local 'time' (millisOp)
waitUntil (or (not (buttonA)) (((millisOp) - time) > 500))
if (((millisOp) - time) > 500) {
  sendBroadcastSimple 'Button long-pressed'
} (not (buttonA)) {
  waitUntil (or (buttonA) (((millisOp) - time) > 250))
  if (((millisOp) - time) > 250) {
    sendBroadcastSimple 'Button pressed'
  } (buttonA) {
    sendBroadcastSimple 'Button double-pressed'
  }
}
}

script 518 139 {
whenStarted
'wifi connect to' 'Network_Name' '' 3
defineThing 'microButton' 'PushButton'
registerEvent 'Button pressed' 'PressedEvent'
registerEvent 'Button double-pressed' 'DoublePressedEvent'
registerEvent 'Button long-pressed' 'LongPressedEvent'
}

script 756 298 {
whenBroadcastReceived 'Button pressed'
setUserLED true
waitMillis 100
setUserLED false
}

script 520 300 {
whenBroadcastReceived 'Button long-pressed'
setUserLED true
waitMillis 1500
setUserLED false
}

script 525 418 {
whenBroadcastReceived 'Button double-pressed'
setUserLED true
waitMillis 100
setUserLED false
waitMillis 100
setUserLED true
waitMillis 100
setUserLED false
}


module 'Web Things' Comm
variables _WoT_definingEvents '_thing description'

	spec ' ' 'wifi connect to' 'wifi connect to _ password _ try _ times' 'str str num' 'Network_Name' '' 3
	spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
	spec 'r' 'getIPAddress' 'IP address'
	spec ' ' 'defineThing' 'define thing _ capability _' 'str str.thingTypesMenu' 'Hello LED' 'Light'
	spec ' ' 'registerEvent' 'register event _ type _' 'str str.thingEventTypesMenu' 'Button Pressed' 'PressedEvent'
	spec ' ' 'addBooleanProperty' 'add boolean property title _ variable _ @Type _' 'str menu.allVarsMenu str.booleanPropertyTypesMenu' '' '' 'OnOffProperty'
	spec ' ' 'addNumProp' 'add number property title _ variable _ min _ max _ @Type _' 'str menu.allVarsMenu num num str.numberPropertyTypesMenu' '' '' 0 100 'LevelProperty'
	spec ' ' 'addStringProperty' 'add string property title _ variable _ @Type _' 'str menu.allVarsMenu str.stringPropertyTypesMenu' '' '' 'ColorProperty'
	spec ' ' '_addCustomProperty' '_add to last property key _ value _' 'str auto' '' '"json value"'
	spec ' ' 'append to thing description' 'append to thing description _' 'auto' ''
	spec ' ' 'clear thing description' 'clear thing description'
	spec 'r' 'thing description' 'thing description'

to '_addCustomProperty' key jsonValue {
  'append to thing description' ('[data:join]' '"' key '": ' jsonValue)
}

to addBooleanProperty title var typeName {
  'append to thing description' ('[data:join]' '    "' var '": {"title": "' title '", "type": "boolean", "href": "/properties/' var '", "@type": "' typeName '"},')
}

to addNumProp title var min max typeName {
  'append to thing description' ('[data:join]' '    "' var '": {"title": "' title '", "type": "number", "minimum": ' min ', "maximum": ' max ', "href": "/properties/' var '", "@type": "' typeName '"')
  if ('TemperatureProperty' == typeName) {
    'append to thing description' ', "unit": "degree celsius"'
  }
  'append to thing description' '},'
}

to addStringProperty title var typeName {
  'append to thing description' ('[data:join]' '    "' var '": {"title": "' title '", "type": "string", "href": "/properties/' var '", "@type": "' typeName '"},')
}

to 'append to thing description' 'more JSON' {
  if ((v '_thing description') == 0) {'clear thing description'}
  '_thing description' = ('[data:join]' (v '_thing description') (v 'more JSON'))
}

to 'clear thing description' {
  '_thing description' = ''
}

to defineThing name capability {
  _WoT_definingEvents = (booleanConstant false)
  'clear thing description'
  if ('' == capability) {
    'append to thing description' ('[data:join]' '{ "title": "' name '",
  "@type": [ ],
  "links":[{
    "rel": "events",
    "href": "/events"
   }],
   "properties": {')
  } else {
    'append to thing description' ('[data:join]' '{ "title": "' name '",
  "@context": "https://iot.mozilla.org/schemas/",
  "@type": ["' capability '"],
  "links":[{
    "rel": "events",
    "href": "/events"
   }],
  "properties": {')
  }
}

to getIPAddress {
  return ('[net:myIPAddress]')
}

to registerEvent title type {
  if (not _WoT_definingEvents) {
    local 'last char' (at (size (v '_thing description')) (v '_thing description'))
    if ((v 'last char') == '{') {
      comment 'thing description ends with "{", meaning there are no properties'
      'append to thing description' '},"events":{'
    } ((v 'last char') == ',') {
      comment 'thing description ends with ",", meaning there''s at least one property'
      '_thing description' = ('[data:join]' ('[data:copyFromTo]' (v '_thing description') 1 ((size (v '_thing description')) - 1)) '},"events":{')
    }
    _WoT_definingEvents = (booleanConstant true)
  }
  'append to thing description' ('[data:join]' '    "' title '": {"description":"MicroBlocks event", "@type":"' type '"},')
}

to 'thing description' {
  if ((v '_thing description') == 0) {return 'thing description is empty'}
  local 'description' (v '_thing description')
  comment 'Fix incomplete thing descriptions'
  if ((at 'last' (v '_thing description')) == ',') {
    comment 'close last property / event'
    description = ('[data:join]' ('[data:copyFromTo]' (v '_thing description') 1 ((size (v '_thing description')) - 1)) '}}')
  } ((at 'last' (v '_thing description')) == '{') {
    comment 'no properties'
    description = ('[data:join]' (v '_thing description') '}}')
  }
  return description
}

to 'wifi connect to' ssid password tries {
  if (not ('[net:hasWiFi]')) {return}
  tries += -1
  '[net:startWiFi]' ssid password
  repeatUntil (or ('Connected' == ('[net:wifiStatus]')) (tries < 1)) {
    '[net:startWiFi]' ssid password
    repeatUntil ('Trying...' != ('[net:wifiStatus]')) {
      comment 'Slow blink while connecting'
      setUserLED true
      waitMillis 500
      setUserLED false
      waitMillis 500
    }
    tries += -1
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  repeatUntil ('Connected' == ('[net:wifiStatus]')) {
    comment 'Slow blink while connecting'
    setUserLED true
    waitMillis 500
    setUserLED false
    waitMillis 500
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

