module main
variables _WoT_definingEvents _useWiFi

script 122 53 {
comment 'Mozila Web of Things pushbutton example.

To test it, either press, long-press or double-press the A button
in your board and look at the display.'
}

script 716 145 {
whenStarted
'wifi connect to' 'Network_Name' '' 3
'set thing name to' 'microButton'
'set thing capability to' 'PushButton'
'register event' 'Button pressed' 'PressedEvent'
'register event' 'Button double-pressed' 'DoublePressedEvent'
'register event' 'Button long-pressed' 'LongPressedEvent'
'start WebThing server'
}

script 133 244 {
whenCondition ('button pressed' 'A')
'trigger event' 'Button pressed'
setUserLED true
waitMillis 100
setUserLED false
}

script 411 321 {
whenCondition ('button double pressed' 'A')
'trigger event' 'Button double-pressed'
setUserLED true
waitMillis 100
setUserLED false
waitMillis 100
setUserLED true
waitMillis 100
setUserLED false
}

script 128 441 {
whenCondition ('button long pressed' 'A')
'trigger event' 'Button long-pressed'
setUserLED true
waitMillis 1500
setUserLED false
}


module 'Button Events' Input
variables _buttons

	spec ' ' '_buttonLoop' '_buttonLoop'
	spec 'r' '_read button' '_read button _' 'auto' 10
	spec 'r' 'button double pressed' 'button _ double pressed' 'auto' 'A'
	spec 'r' 'button long pressed' 'button _ long pressed' 'auto' 5
	spec 'r' 'button pressed' 'button _ pressed' 'auto' 5
	spec 'r' '_button' '_button _' 'auto' 10

to '_button' 'pin or name' {
  if (_buttons == 0) {
    _buttons = ('[data:makeList]')
    sendBroadcastSimple '_buttonLoop'
  }
  for 'each button' _buttons {
    if ((at 1 (v 'each button')) == (v 'pin or name')) {return (v 'each button')}
  }
  comment 'This button has not been initialized. Let''s add it.'
  local 'new button' ('[data:makeList]' (v 'pin or name') '' '' 'waiting')
  '[data:addLast]' (v 'new button') _buttons
  return (v 'new button')
}

to '_buttonLoop' {
  forever {
    for button _buttons {
      local 'currently pressed' ('_read button' (at 1 button))
      local 'previous state' (at 4 button)
      if (and ((v 'previous state') == 'waiting') (v 'currently pressed')) {
        comment 'save state change time'
        atPut 2 button (millisOp)
        atPut 3 button (v 'currently pressed')
        atPut 4 button 'pressed'
      } (and ((v 'previous state') == 'pressed') (not (v 'currently pressed'))) {
        local 'press time' ((millisOp) - (at 2 button))
        comment 'There''s been a press. Let''s check how long it was.'
        if ((v 'press time') > 500) {
          atPut 4 button 'long press'
        } ((v 'press time') > 250) {
          atPut 4 button 'single press'
        } else {
          comment 'This is an internal intermediate state.
It could turn out to be a single press or a double press.'
          atPut 2 button (millisOp)
          atPut 4 button 'short press'
        }
      } (and ((v 'previous state') == 'short press') (v 'currently pressed')) {
        atPut 4 button 'double press'
      } (and (and ((v 'previous state') == 'short press') (not (v 'currently pressed'))) (((millisOp) - (at 2 button)) > 250)) {
        atPut 4 button 'single press'
      } (and ((v 'previous state') == 'double press handled') (not (v 'currently pressed'))) {
        comment 'We only go back to "waiting" after a double press if the event has been handled
and the user has released the button. Otherwise we''ll cause false "single press"
positives.'
        atPut 4 button 'waiting'
      }
    }
  }
}

to '_read button' 'pin or name' {
  if ((v 'pin or name') == 'A') {
    return (buttonA)
  } ((v 'pin or name') == 'B') {
    return (buttonB)
  } else {
    return (digitalReadOp (v 'pin or name'))
  }
}

to 'button double pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'double press') {
    comment 'We only go back to "waiting" after a double press if the event has been handled
and the user has released the button. Otherwise we''ll cause false "single press"
positives.'
    atPut 4 button 'double press handled'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}

to 'button long pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'long press') {
    atPut 4 button 'waiting'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}

to 'button pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'single press') {
    atPut 4 button 'waiting'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}


module 'HTTP server'

	spec ' ' '[net:startHttpServer]' 'start HTTP server'
	spec 'r' '[net:httpServerGetRequest]' 'HTTP server request'
	spec 'r' 'body of request' 'body of request _' 'auto' ''
	spec 'r' 'path of request' 'path of request _' 'auto' ''
	spec 'r' 'request method' 'method of request _' 'auto' ''

to 'body of request' request {
  return ('[data:copyFromTo]' request (('[data:find]' ('[data:join]' ('[data:unicodeString]' 13) ('[data:unicodeString]' 10) ('[data:unicodeString]' 13) ('[data:unicodeString]' 10)) request) + 4))
}

to 'path of request' request {
  return ('[data:copyFromTo]' request (('[data:find]' ' ' request) + 1) (('[data:find]' ' HTTP' request) - 1))
}

to 'request method' request {
  return ('[data:copyFromTo]' request 1 (('[data:find]' ' ' request) - 1))
}


module 'Web Things'
variables _WoT_title _WoT_events _WoT_capability _WoT_event_defs _WoT_property_defs

	spec ' ' 'set thing name to' 'set thing name to _' 'auto' 'MicroBlocks thing'
	spec ' ' 'set thing capability to' 'set thing capability to _' 'str.thingTypesMenu' 'Light'
	spec ' ' 'addBooleanProperty' 'set boolean property _ title _ @Type _ : read only _' 'menu.allVarsMenu str str.booleanPropertyTypesMenu bool' '' '' 'OnOffProperty' false
	spec ' ' 'addStringProperty' 'set string property _ title _ @Type _ : read only _' 'menu.allVarsMenu str str.stringPropertyTypesMenu bool' '' '' 'ColorProperty' false
	spec ' ' 'addNumProp' 'set number property _ title _ min _ max _ @Type _ : read only _' 'menu.allVarsMenu str num num str.numberPropertyTypesMenu bool' '' '' 0 100 'LevelProperty' false
	spec ' ' 'register event' 'register event _ type _' 'auto str.thingEventTypesMenu' 'Button A pressed' 'PressedEvent'
	spec ' ' 'start WebThing server' 'start WebThing server'
	spec ' ' 'trigger event' 'trigger event _' 'auto' 'button pressed'
	spec 'r' 'thing description JSON' 'thing description JSON'
	spec 'r' 'properties JSON' 'properties JSON'
	spec 'r' 'event definitions JSON' 'event definitions JSON'
	spec 'r' 'events JSON' 'events JSON'
	spec ' ' '_process OPTIONS request' '_process OPTIONS request _' 'auto' ''
	spec ' ' '_process PUT request' '_process PUT request _' 'auto' ''
	spec ' ' '_process request' '_process GET request _' 'auto' ''
	spec ' ' '_respond 404 Not Found' '_respond 404 Not Found'
	spec 'r' '_JSON value' '_JSON value _' 'auto' '10'
	spec 'r' '_parse JSON value' '_parse JSON value _' 'auto' ''
	spec 'r' '_trimmed' '_trimmed _' 'auto' '  hello    '
	spec ' ' '_WoT_start_server' '_WoT_start_server'
	spec 'r' '_type of' '_type of _' 'auto' '10'
	spec ' ' '_add or replace property' '_add or replace property _ attributes _' 'menu.nil str' '' ''

to '_JSON value' value {
  local 'JSON value' ''
  if (isType value 'string') {
    'JSON value' = ('[data:join]' '"' value '"')
  } (isType value 'list') {
    'JSON value' = '['
    for item value {
      'JSON value' = ('[data:join]' (v 'JSON value') ('_JSON value' item) ',')
    }
    'JSON value' = ('[data:join]' ('[data:copyFromTo]' (v 'JSON value') 1 ((size (v 'JSON value')) - 1)) ']')
  } (isType value 'boolean') {
    if value {
      'JSON value' = 'true'
    } else {
      'JSON value' = 'false'
    }
  } else {
    'JSON value' = value
  }
  return (v 'JSON value')
}

to '_WoT_start_server' {
  '[net:startHttpServer]'
  local 'request' ''
  forever {
    request = ('[net:httpServerGetRequest]')
    if (request != (booleanConstant false)) {
      if (('request method' request) == 'GET') {
        '_process request' request
      } (('request method' request) == 'PUT') {
        '_process PUT request' request
      } (('request method' request) == 'OPTIONS') {
        '_process OPTIONS request' request
      } else {
        '_respond 404 Not Found'
      }
    }
    waitMillis 50
  }
}

to '_add or replace property' varName 'attributes JSON' {
  if (_WoT_property_defs == 0) {_WoT_property_defs = ('[data:makeList]')}
  for def _WoT_property_defs {
    if ((at 1 def) == varName) {
      atPut 2 def (v 'attributes JSON')
      return ''
    }
  }
  '[data:addLast]' ('[data:makeList]' varName (v 'attributes JSON')) _WoT_property_defs
}

to '_parse JSON value' JSON {
  local 'value' ('_trimmed' JSON)
  if ((at 1 value) == '"') {
    comment 'Doesn''t handle \\"
Please don''t be _that_ picky ;)'
    value = ('[data:copyFromTo]' value 2 ((size value) - 1))
    local 'escaped quote index' ('[data:find]' '\"' value)
    repeatUntil ((v 'escaped quote index') == -1) {
      value = ('[data:join]' ('[data:copyFromTo]' value 1 ((v 'escaped quote index') - 1)) ('[data:copyFromTo]' value ((v 'escaped quote index') + 2)))
      'escaped quote index' = ('[data:find]' '\"' value)
    }
  } ((at 1 value) == '[') {
    comment 'Doesn''t handle multi-dimensional lists'
    local 'list' ('[data:makeList]')
    value = ('[data:copyFromTo]' value 2 ((size value) - 1))
    local 'comma index' ('[data:find]' ',' value)
    repeatUntil ((v 'comma index') == -1) {
      '[data:addLast]' ('_parse JSON value' ('[data:copyFromTo]' value 1 ((v 'comma index') - 1))) list
      value = ('[data:copyFromTo]' value ((v 'comma index') + 1))
      'comma index' = ('[data:find]' ',' value)
    }
    '[data:addLast]' ('_parse JSON value' value) list
    value = list
  } (value == 'true') {
    value = (booleanConstant true)
  } (value == 'false') {
    value = (booleanConstant false)
  } else {
    value = (value + 0)
  }
  return value
}

to '_process OPTIONS request' req {
  '[net:respondToHttpRequest]' '200 OK' '' 'Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: PUT, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type'
}

to '_process PUT request' req {
  local 'path' ('path of request' req)
  if (('[data:find]' '/properties/' path) > 0) {
    local 'varName' ('[data:copyFromTo]' path 13)
    if ('[vars:varExists]' varName) {
      local 'body' ('body of request' req)
      '[vars:setVarNamed]' varName ('_parse JSON value' ('[data:copyFromTo]' body (('[data:find]' ':' body) + 1) (('[data:find]' '}' body) - 1)))
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"' varName '":' ('_JSON value' ('[vars:varNamed]' varName)) '}') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
    } else {
      '_respond 404 Not Found'
    }
  } else {
    '_respond 404 Not Found'
  }
}

to '_process request' req {
  local 'path' ('path of request' req)
  if (path == '/') {
    '[net:respondToHttpRequest]' '200 OK' ('thing description JSON') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
  } (or (path == '/properties') (path == '/properties/')) {
    '[net:respondToHttpRequest]' '200 OK' ('properties JSON') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
  } (('[data:find]' '/properties/' path) > 0) {
    local 'varName' ('[data:copyFromTo]' path 13)
    if ('[vars:varExists]' varName) {
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"' varName '":' ('_JSON value' ('[vars:varNamed]' varName)) '}') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
    } else {
      '_respond 404 Not Found'
    }
  } (or (path == '/events') (path == '/events/')) {
    '[net:respondToHttpRequest]' '200 OK' ('events JSON') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
    _WoT_events = ('[data:makeList]')
  } else {
    '_respond 404 Not Found'
  }
}

to '_respond 404 Not Found' {
  '[net:respondToHttpRequest]' '404 Not Found' '{ "error":"Resource not found" }' 'Access-Control-Allow-Origin: *
Content-Type: application/json'
}

to '_trimmed' string {
  comment 'remove surrounding spaces'
  repeatUntil ((at 1 string) != ' ') {
    string = ('[data:copyFromTo]' string 2)
  }
  repeatUntil ((at 'last' string) != ' ') {
    string = ('[data:copyFromTo]' string 1 ((size string) - 1))
  }
  return string
}

to '_type of' value {
  if (isType value 'number') {
    return 'number'
  } (isType value 'list') {
    return 'array'
  } (isType value 'string') {
    return 'string'
  } (isType value 'boolean') {
    return 'boolean'
  }
  comment 'should never happen'
  return 'null'
}

to addBooleanProperty varName title type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 3) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName ('[data:join]' '"title":"' title '","type":"boolean","@type":"' type '",' '"readonly":' readonly)
}

to addNumProp varName title min max type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 5) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName ('[data:join]' '"title":"' title '","type":"number","@type":"' type '",' '"readonly":' readonly ',"minimum":' min ',"maximum":' max)
}

to addStringProperty varName title type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 3) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName ('[data:join]' '"title":"' title '","type":"string","@type":"' type '",' '"readonly":' readonly)
}

to 'event definitions JSON' {
  local 'JSON' '{'
  if (_WoT_event_defs == 0) {
    _WoT_event_defs = ('[data:makeList]')
  }
  for 'event def' _WoT_event_defs {
    JSON = ('[data:join]' JSON '"' (at 1 (v 'event def')) '":{"description":"MicroBlocks event","@type":"' (at 2 (v 'event def')) '"},')
  }
  if ((size JSON) > 1) {
    return ('[data:join]' ('[data:copyFromTo]' JSON 1 ((size JSON) - 1)) '}')
  } else {
    return '{}'
  }
}

to 'events JSON' {
  local 'JSON' '['
  for event _WoT_events {
    JSON = ('[data:join]' JSON '{"' (at 1 event) '":{"data":{"id":' (at 2 event) '}}},')
  }
  if ((size JSON) > 1) {
    return ('[data:join]' ('[data:copyFromTo]' JSON 1 ((size JSON) - 1)) ']')
  } else {
    return '[]'
  }
}

to 'properties JSON' {
  local 'JSON' '{'
  if (or (_WoT_property_defs == 0) ((size _WoT_property_defs) == 0)) {
    for varName ('[vars:varNames]') {
      if (not ((at 1 varName) == '_')) {
        local 'value' ('[vars:varNamed]' varName)
        JSON = ('[data:join]' JSON '"' varName '":{"title":"' varName '","type":"' ('_type of' value) '","links":[{"href":"/properties/' varName '"}],"@type":""},')
      }
    }
  } else {
    for 'property def' _WoT_property_defs {
      local 'varName' (at 1 (v 'property def'))
      JSON = ('[data:join]' JSON '"' varName '":{"links":[{"href":"/properties/' varName '"}],' (at 2 (v 'property def')) '},')
    }
  }
  if ((at 'last' JSON) == ',') {
    JSON = ('[data:copyFromTo]' JSON 1 ((size JSON) - 1))
  }
  return ('[data:join]' JSON '}')
}

to 'register event' 'event title' 'event type' {
  local 'event def' ('[data:makeList]' (v 'event title') (v 'event type'))
  if (_WoT_event_defs == 0) {
    _WoT_event_defs = ('[data:makeList]')
  }
  '[data:addLast]' (v 'event def') _WoT_event_defs
}

to 'set thing capability to' capability {
  _WoT_capability = capability
}

to 'set thing name to' title {
  _WoT_title = title
}

to 'start WebThing server' {
  if (_WoT_title == 0) {'set thing name to' 'MicroBlocks thing'}
  if (_WoT_capability == 0) {'set thing capability to' ''}
  if (_WoT_events == 0) {_WoT_events = ('[data:makeList]')}
  sendBroadcastSimple '_WoT_start_server'
}

to 'thing description JSON' {
  return ('[data:join]' '{"title":"' _WoT_title '","@context":"https://iot.mozilla.org/schemas/","@type":["' _WoT_capability '"],"links":[{"rel":"events","href":"/events"},{"rel":"properties","href":"/properties"}],"properties":' ('properties JSON') ',"events":' ('event definitions JSON') '}')
}

to 'trigger event' 'event name' {
  '[data:addLast]' ('[data:makeList]' (v 'event name') (millisOp)) _WoT_events
}


module Wifi Comm

	spec ' ' 'wifi connect to' 'wifi connect to _ password _ try _ times' 'str str num' 'Network_Name' '' 3
	spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
	spec 'r' 'getIPAddress' 'IP address'

to getIPAddress {
  return ('[net:myIPAddress]')
}

to 'wifi connect to' ssid password tries {
  if (not ('[net:hasWiFi]')) {return}
  repeatUntil (or ('Connected' == ('[net:wifiStatus]')) (tries < 1)) {
    '[net:startWiFi]' ssid password
    repeatUntil ('Trying...' != ('[net:wifiStatus]')) {
      comment 'Slow blink while connecting'
      setUserLED true
      waitMillis 500
      setUserLED false
      waitMillis 500
    }
    tries += -1
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  repeatUntil ('Connected' == ('[net:wifiStatus]')) {
    comment 'Slow blink while connecting'
    setUserLED true
    waitMillis 500
    setUserLED false
    waitMillis 500
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

