module main
variables _WoT_definingEvents _useWiFi

script 189 50 {
comment 'Mozila Web of Things pushbutton example.

To test it, either press, long-press or double-press the A button
in your board and look at the display.'
}

script 50 129 {
whenButtonPressed 'A'
local 'time' (millisOp)
waitUntil (or (not (buttonA)) (((millisOp) - time) > 500))
if (((millisOp) - time) > 500) {
  sendBroadcastSimple 'Button long-pressed'
} (not (buttonA)) {
  waitUntil (or (buttonA) (((millisOp) - time) > 250))
  if (((millisOp) - time) > 250) {
    sendBroadcastSimple 'Button pressed'
  } (buttonA) {
    sendBroadcastSimple 'Button double-pressed'
  }
}
}

script 518 139 {
whenStarted
'wifi connect to' 'Network_Name' '' 3
defineThing 'microButton' 'PushButton'
registerEvent 'Button pressed' 'PressedEvent'
registerEvent 'Button double-pressed' 'DoublePressedEvent'
registerEvent 'Button long-pressed' 'LongPressedEvent'
}

script 756 298 {
whenBroadcastReceived 'Button pressed'
setUserLED true
waitMillis 100
setUserLED false
}

script 520 300 {
whenBroadcastReceived 'Button long-pressed'
setUserLED true
waitMillis 500
setUserLED false
}

script 525 418 {
whenBroadcastReceived 'Button double-pressed'
setUserLED true
waitMillis 100
setUserLED false
waitMillis 100
setUserLED true
waitMillis 100
setUserLED false
}


module 'Web Thing' Comm
variables _WoT_definingEvents _useWiFi

	spec ' ' 'wifi connect to' 'wifi connect to _ password _ try _ times' 'str str num' 'Network_Name' '' 3
	spec ' ' 'wifiCreateHotspot' 'wifi create hotspot _ password _' 'str str' 'Network_Name' 'Network_Password'
	spec 'r' 'getIPAddress' 'IP address'
	spec ' ' 'defineThing' 'define thing _ capability _' 'str str.thingTypesMenu' 'Hello LED' 'Light'
	spec ' ' 'registerEvent' 'register event _ type _' 'str str.thingEventTypesMenu' 'Button Pressed' 'PressedEvent'
	spec ' ' 'addBooleanProperty' 'add boolean property title _ variable _ @Type _' 'str menu.allVarsMenu str.booleanPropertyTypesMenu' '' '' 'OnOffProperty'
	spec ' ' 'addNumProp' 'add number property title _ variable _ min _ max _ @Type _' 'str menu.allVarsMenu num num str.numberPropertyTypesMenu' '' '' 0 100 'LevelProperty'
	spec ' ' 'addStringProperty' 'add string property title _ variable _ @Type _' 'str menu.allVarsMenu str.stringPropertyTypesMenu' '' '' 'ColorProperty'
	spec ' ' '_addCustomProperty' '_add to last property key _ value _' 'str auto' '' '"json value"'
	spec 'r' '[net:thingDescription]' 'thing description'
	spec ' ' '[net:clearThingDescription]' 'clear thing description'

to '_addCustomProperty' key jsonValue {
  if _useWiFi {'[net:appendToThingProperty]' '"' key '": ' jsonValue}
}

to addBooleanProperty title var typeName {
  if _useWiFi {
    '[net:appendToThingDescription]' '    "' var '": {"title": "' title '", "type": "boolean", "href": "/properties/' var '", "@type": "' typeName '"},'
  } else {
    sendBroadcast 'moz-property {"title": "' title '", "type": "boolean", "href": "/properties/' var '", "@type": "' typeName '"}'
  }
}

to addNumProp title var min max typeName {
  if _useWiFi {
    '[net:appendToThingDescription]' '    "' var '": {"title": "' title '", "type": "number", "minimum": ' min ', "maximum": ' max ', "href": "/properties/' var '", "@type": "' typeName '"'
    if ('TemperatureProperty' == typeName) {
      '[net:appendToThingDescription]' ', "unit": "degree celsius"'
    }
    '[net:appendToThingDescription]' '},'
  } else {
    sendBroadcast 'moz-property {"title":"' title '", "type": "number", "minimum": ' min ', "maximum": ' max ', "href": "/properties/' var '", "@type": "' typeName '"}'
  }
}

to addStringProperty title var typeName {
  if _useWiFi {
    '[net:appendToThingDescription]' '    "' var '": {"title": "' title '", "type": "string", "href": "/properties/' var '", "@type": "' typeName '"},'
  } else {
    sendBroadcast 'moz-property {"title":"' title '", "type": "string", "href": "/properties/' var '", "@type": "' typeName '"}'
  }
}

to defineThing name capability {
  _useWiFi = ('[net:hasWiFi]')
  if _useWiFi {
    _WoT_definingEvents = (booleanConstant false)
    '[net:clearThingDescription]'
    if ('' == capability) {
      '[net:appendToThingDescription]' '{ "title": "' name '",
  "@type": [ ],
  "links":[{
    "rel": "events",
    "href": "/events"
   }],
   "properties": {'
    } else {
      '[net:appendToThingDescription]' '{ "title": "' name '",
  "@context": "https://iot.mozilla.org/schemas/",
  "@type": ["' capability '"],
  "links":[{
    "rel": "events",
    "href": "/events"
   }],
  "properties": {'
    }
  } else {
    sendBroadcast 'moz-thing { "name": "' name '","@context": "https://iot.mozilla.org/schemas/","@type": ["' capability '"]}'
  }
}

to getIPAddress {
  return ('[net:myIPAddress]')
}

to registerEvent title type {
  if _useWiFi {
    if (not _WoT_definingEvents) {
      local 'last char' (at ((size ('[net:thingDescription]')) - 1) ('[net:thingDescription]'))
      if ((v 'last char') == '{') {
        comment 'thing description ends with "{", meaning there are no properties'
        '[net:appendToThingDescription]' '},"events":{'
      } ((v 'last char') == ',') {
        comment 'thing description ends with ",", meaning there''s at least one property'
        '[net:appendToThingDescription]' '"":{}},"events":{'
      }
      _WoT_definingEvents = (booleanConstant true)
    }
    '[net:appendToThingDescription]' '    "' title '": {"description":"MicroBlocks event", "@type":"' type '"},'
  } else {
    sendBroadcast 'moz-event {"name":"' title '", "metadata":{"description":"MicroBlocks event", "@type":"' type '"}}'
  }
}

to 'wifi connect to' ssid password tries {
  if (not ('[net:hasWiFi]')) {return}
  tries += -1
  '[net:startWiFi]' ssid password
  repeatUntil (or ('Connected' == ('[net:wifiStatus]')) (tries < 1)) {
    '[net:startWiFi]' ssid password
    repeatUntil ('Trying...' != ('[net:wifiStatus]')) {
      comment 'Slow blink while connecting'
      setUserLED true
      waitMillis 500
      setUserLED false
      waitMillis 500
    }
    tries += -1
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

to wifiCreateHotspot ssid password {
  if (not ('[net:hasWiFi]')) {return}
  '[net:startWiFi]' ssid password true
  repeatUntil ('Connected' == ('[net:wifiStatus]')) {
    comment 'Slow blink while connecting'
    setUserLED true
    waitMillis 500
    setUserLED false
    waitMillis 500
  }
  repeat 8 {
    comment 'Quick blinks when connected'
    setUserLED true
    waitMillis 50
    setUserLED false
    waitMillis 50
  }
  sayIt 'My IP address is:' ('[net:myIPAddress]')
}

