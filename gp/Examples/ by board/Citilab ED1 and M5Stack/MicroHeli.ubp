module main
author unknown
version 1 0 
description ''
variables screen obstacles obsOK prevObs heliX heliY gameOver toggleOn 

	spec ' ' 'clearC5' 'clearC5'
	spec ' ' 'dispScreen' 'dispLEDs'
	spec ' ' 'genObstacle' 'genObstacle'
	spec 'r' 'screenPtr2RC' 'screenPtr2RC _' 'auto' 10
	spec ' ' 'shiftScreen' 'shiftScreen'
	spec ' ' 'toggleHeli' 'toggleHeli'
	spec 'r' 'crashHeli' 'crashHeli _ _' 'auto auto' 2 3
	spec ' ' 'directions' 'directions'
	spec ' ' 'gameOver' 'gameOver'

to clearC5 {
  comment 'Clear col5'
  atPut 5 screen (booleanConstant true)
  atPut 10 screen (booleanConstant false)
  atPut 15 screen (booleanConstant false)
  atPut 20 screen (booleanConstant false)
  atPut 25 screen (booleanConstant false)
}

to crashHeli x y {
  local 'screenPtr' (((y - 1) * 5) + x)
  if (at screenPtr screen) {
    return (booleanConstant true)
  } else {
    return (booleanConstant false)
  }
}

to directions {
  local 'ms' 200
  '[display:mbDisplayOff]'
  repeat 2 {
    '[display:mbDisplay]' 66624
    waitMillis ms
    '[display:mbDisplay]' 0
    waitMillis ms
  }
  '[display:mbDisplay]' 4347332
  waitMillis 1000
  repeat 2 {
    '[display:mbDisplay]' 278784
    waitMillis ms
    '[display:mbDisplay]' 0
    waitMillis ms
  }
  '[display:mbDisplay]' 4674692
  waitMillis 3000
}

to dispScreen {
  for pos (size screen) {
    comment 'In: 1-25
Out: LED on/off'
    local 'r' ((screenPtr2RC pos) / 10)
    local 'c' ((screenPtr2RC pos) % 10)
    if (at pos screen) {
      '[display:mbPlot]' c r
    } else {
      '[display:mbUnplot]' c r
    }
  }
}

to gameOver {
  gameOver = (booleanConstant true)
  toggleOn = (booleanConstant false)
  local 'ms' 100
  repeat 3 {
    '[display:mbDisplay]' 8554664
    waitMillis ms
    '[display:mbDisplay]' 0
    waitMillis ms
  }
  scroll_text 'GAME Over'
  '[display:mbDisplay]' 2269696
}

to genObstacle {
  comment 'Makes 0-3 down obstacles
at col 5 of screen randomly
0    1    2    3
x    x    x    x
.     .     x   x
.     .     .    x
.     x    .    .
x    x    x    .
Transitions of 1->3 and 3->1
are not allowed'
  local 'obsOK' (booleanConstant false)
  repeatUntil obsOK {
    comment 'Gens obs = 0 - 3'
    local 'obs' ((random 1 10) % 4)
    if (and (prevObs == 1) (obs == 3)) {
      noop
    } (and (prevObs == 3) (obs == 1)) {
      noop
    } else {
      prevObs = obs
      obsOK = (booleanConstant true)
    }
  }
  clearC5
  for i obs {
    atPut (i * 5) screen (booleanConstant true)
  }
  if (obs == 1) {
    atPut 20 screen (booleanConstant true)
    atPut 25 screen (booleanConstant true)
  } (obs == 2) {
    atPut 25 screen (booleanConstant true)
  }
}

to screenPtr2RC screenPtr {
  comment 'In: 1-25

Out: rc'
  local 'c' (screenPtr % 5)
  local 'r' (screenPtr / 5)
  local 'rc' 0
  if (c == 0) {
    c = 5
  } (c > 0) {
    r += 1
  }
  rc = ((r * 10) + c)
  return rc
}

to shiftScreen {
  comment 'Shift left by 1 col'
  for row 5 {
    for col 4 {
      local 'c' (((row - 1) * 5) + col)
      atPut c screen (at (c + 1) screen)
    }
  }
}

to toggleHeli {
  local 'ms' 50
  forever {
    repeatUntil (not toggleOn) {
      '[display:mbPlot]' heliX heliY
      waitMillis ms
      '[display:mbUnplot]' heliX heliY
      if (buttonA) {
        waitMillis ms
        heliY += -1
      } (buttonB) {
        waitMillis ms
        heliY += 1
      }
      if (crashHeli heliX heliY) {
        gameOver
      }
      waitMillis ms
    }
  }
}

script 1060 50 {
comment 'Game contributed by Turgut Guneysu
============================

microHELI:

This is the micro version of the popular Helicopter game.
One flies the Heli through a corridor of obstacles hanging
from the ceiling and rising from the ground.

Use buttonA to RAISE the Heli
Use button B to LOWER the Heli

That''s it !

Have Fun.'
}

script 50 119 {
whenStarted
screen = (newList 25)
fillList screen (booleanConstant false)
prevObs = 0
heliX = 2
heliY = 3
gameOver = (booleanConstant false)
toggleOn = (booleanConstant false)
directions
'[display:mbDisplayOff]'
toggleOn = (booleanConstant true)
repeatUntil gameOver {
  genObstacle
  shiftScreen
  clearC5
  dispScreen
  waitMillis 400
}
}

script 312 140 {
to genObstacle {}
}

script 689 146 {
to shiftScreen {}
}

script 690 413 {
to clearC5 {}
}

script 82 574 {
whenStarted
toggleHeli
}

script 691 634 {
to dispScreen {}
}

script 73 652 {
to toggleHeli {}
}

script 316 898 {
to crashHeli {}
}


module 'LED Display' Output
author MicroBlocks
version 1 0 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) also support this primitives in a simulated "fat pixel" display.'

	spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237450
	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
	spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
	spec ' ' 'displayCharacter' 'display character _' 'str' 'A'

to displayCharacter s {
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}


module 'Misc Primitives'
author MicroBlocks
version 1 0 
description 'Miscellaneous system primitives.'

	spec ' ' 'noop' 'no op'
	spec ' ' 'ignoreArgs' 'ignore : _ : ...' 'auto' 0
	spec 'r' 'pushArgCount' 'arg count'
	spec 'r' 'getArg' 'arg _' 'num' 0
	spec 'r' 'hexToInt' 'hex _' 'str' '3F'
	spec 'r' 'longMult' '( _ * _ ) >> _' 'num num num' 1024 2048 10
	spec 'r' '[misc:sin]' 'fixed sine _' 'num' 9000

module Scrolling Output
author unknown
version 1 0 
description ''
variables _digit_shapes _digit_shapes_start_index _stop_scrolling_text 

	spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
	spec ' ' 'scroll_number' 'scroll number _ : pausing _ ms' 'num num' 123 100
	spec ' ' '_covert_to_shapes' '_covert_to_shapes _' 'num' 42
	spec ' ' '_scroll_digit_shapes' '_scroll_digit_shapes _' 'num' 100
	spec ' ' 'stopScrollingText' 'stop scrolling'

to '_covert_to_shapes' n {
  if (_digit_shapes == 0) {_digit_shapes = (newList 12)}
  fillList _digit_shapes ('[display:mbShapeForLetter]' ' ')
  local 'index' (size _digit_shapes)
  local 'isNegative' (booleanConstant false)
  if (n < 0) {
    isNegative = (booleanConstant true)
    n = (0 - n)
  } (n == 0) {
    atPut index _digit_shapes ('[display:mbShapeForLetter]' '0')
    _digit_shapes_start_index = index
  }
  repeatUntil (n == 0) {
    local 'digit' (n % 10)
    atPut index _digit_shapes ('[display:mbShapeForLetter]' (48 + digit))
    index += -1
    n = (n / 10)
  }
  if isNegative {
    atPut index _digit_shapes ('[display:mbShapeForLetter]' '-')
    index += -1
  }
  _digit_shapes_start_index = index
}

to '_scroll_digit_shapes' delay {
  _stop_scrolling_text = (booleanConstant false)
  local 'prevShape' ('[display:mbShapeForLetter]' ' ')
  local 'i' _digit_shapes_start_index
  local 'end' ((size _digit_shapes) + 1)
  repeatUntil (i > end) {
    local 'shape' ('[display:mbShapeForLetter]' ' ')
    if (i < end) {
      shape = (at i _digit_shapes)
    }
    for j 5 {
      local 'x' (1 - j)
      '[display:mbDrawShape]' prevShape x 1
      '[display:mbDrawShape]' shape (x + 5) 1
      waitMillis delay
      if _stop_scrolling_text {
        '[display:mbDisplayOff]'
        return 0
      }
    }
    prevShape = shape
    i += 1
  }
}

to scroll_number n optionalDelay {
  delay = 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  '_covert_to_shapes' n
  '_scroll_digit_shapes' delay
}

to scroll_text text optionalDelay {
  delay = 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  local 'length' (size text)
  for position ((length * 6) + 6) {
    if _stop_scrolling_text {return 0}
    for i length {
      '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at i text)) (((i * 6) + 2) - position) 1
    }
    waitMillis delay
  }
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}

