module main
author unknown
version 1 0 
description ''
variables deco 

	spec ' ' 'polygon' 'polygon _ _ _' 'auto auto auto' 5 100 0
	spec ' ' 'decoration' 'decoration _' 'auto' 0

to decoration num {
  local 'x' (_turtleX >> 14)
  local 'y' (_turtleY >> 14)
  if (num == 1) {
    '[tft:circle]' x y 4 _turtleColor true
  } (num == 2) {
    '[tft:rect]' (x - 4) (y - 4) 8 8 _turtleColor true
  } (num == 3) {
    '[tft:text]' '@' (x - 4) (y - 4) _turtleColor 2 false
  }
}

to polygon sides size xoffset {
  local 'd' ((('[misc:sin]' (360 / sides)) * size) / ('[misc:sin]' 120))
  'pen up'
  setHeading 0
  'go to x' (xoffset - (d / 2)) (0 - (size / 2))
  'pen down'
  repeat sides {
    move d
    turnBy (360 / sides)
    decoration deco
  }
  'pen up'
}

script 497 50 {
whenCondition (('[sensors:tiltZ]') < -140)
deco += 1
deco = (deco % 4)
waitMillis 200
}

script 51 55 {
comment '    By José García Yeste - Citilab
===========================
A cool Turtle library demo!

Draws polygons on the ED1 display.
Tilt the board to change the sides of
the shape. Shake it to cycle between
node styles. Press the OK button to
change the polygon color.'
}

script 502 208 {
whenCondition ('OK button')
setPenToRandomColor
}

script 50 231 {
whenStarted
deco = 1
'set pen color to' (colorSwatch 195 188 254 255)
forever {
  local 'sides' (maximum 3 ((('[sensors:tiltY]') / 5) + 6))
  local 'side length' (('[tft:getWidth]') / 2)
  local 'xOffset' ((('[sensors:tiltX]') * ('[tft:getWidth]')) / 50)
  polygon sides (v 'side length') xOffset
  waitMillis 40
  '[display:mbDisplayOff]'
  waitMillis 1
}
}

script 505 305 {
whenButtonPressed 'A'
setPenToRandomColor
}


module 'Basic Sensors' Input
author MicroBlocks
version 1 0 
tags tilt acceleration light sensor 
description 'Provides blocks to read tilt in the three axes, acceleration, temperature and light level. Many boards come with this particular set of sensors, such as the micro:bit, the Circuit Playground Express, the Calliope or the Citilab ED1.'

	spec 'r' '[sensors:tiltX]' 'tilt x'
	spec 'r' '[sensors:tiltY]' 'tilt y'
	spec 'r' '[sensors:tiltZ]' 'tilt z'
	spec 'r' '[sensors:acceleration]' 'acceleration'
	spec 'r' '[display:lightLevel]' 'light level'
	spec 'r' '[sensors:temperature]' 'temperature (°C)'

module 'ED1 Buttons' Input
author MicroBlocks
version 1 0 
tags button capacitive ed1 
description 'Provides blocks for the six capacitive buttons in the Citilab ED1 board.'
variables _ED1_buttons_init '_capacitive threshold' 

	spec ' ' '_ED1_buttons_init' '_ED1_buttons_init' 'any any any'
	spec 'r' 'OK button' 'button OK'
	spec 'r' 'cancel button' 'button X'
	spec 'r' 'up button' 'button up'
	spec 'r' 'down button' 'button down'
	spec 'r' 'left button' 'button left'
	spec 'r' 'right button' 'button right'
	spec ' ' 'set capacitive threshold to' 'set capacitive threshold to _' 'auto' 16

to 'OK button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 15) < (v '_capacitive threshold'))
}

to '_ED1_buttons_init' {
  if (_ED1_buttons_init == 0) {
    if ((v '_capacitive threshold') == 0) {'_capacitive threshold' = 16}
    _ED1_buttons_init = (booleanConstant true)
  }
}

to 'cancel button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 14) < (v '_capacitive threshold'))
}

to 'down button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 13) < (v '_capacitive threshold'))
}

to 'left button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 2) < (v '_capacitive threshold'))
}

to 'right button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 27) < (v '_capacitive threshold'))
}

to 'set capacitive threshold to' threshold {
  '_capacitive threshold' = threshold
}

to 'up button' {
  '_ED1_buttons_init'
  return (('[sensors:touchRead]' 4) < (v '_capacitive threshold'))
}


module 'LED Display' Output
author MicroBlocks
version 1 0 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) also support this primitives in a simulated "fat pixel" display.'

	spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237450
	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
	spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
	spec ' ' 'displayCharacter' 'display character _' 'str' 'A'

to displayCharacter s {
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}


module TFT Output
author MicroBlocks
version 1 1 
tags tft graphics draw 
description 'Draw graphics and write text on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'

	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[tft:rect]' 'draw rectangle on TFT at x _ y _ width _ height _ color _ : filled _' 'num num num num color bool' 10 10 40 30 nil true
	spec ' ' '[tft:roundedRect]' 'draw rounded rectangle on TFT at x _ y _ width _ height _ radius _ color _ : filled _' 'num num num num num color bool' 10 10 40 30 8 nil true
	spec ' ' '[tft:circle]' 'draw circle on TFT at x _ y _ radius _ color _ : filled _' 'num num num color bool' 40 40 30 nil true
	spec ' ' '[tft:triangle]' 'draw triangle on TFT at x _ y _ , x _ y _ , x _ y _ color _ : filled _' 'num num num num num num color bool' 20 20 30 80 60 5 nil true
	spec ' ' '[tft:text]' 'write _ on TFT at x _ y _ color _ : scale _ wrap _' 'str num num color num bool' 'Hello World!' 5 5 nil 2 true
	spec ' ' '[tft:line]' 'draw line on TFT from x _ y _ to x _ y _ color _' 'num num num num color' 12 8 25 15
	spec ' ' '[tft:setPixel]' 'set TFT pixel x _ y _ to _' 'auto auto color' '10' '10'
	spec 'r' 'makeColor' 'color r _ g _ b _ (0-255)' 'auto auto auto' 0 100 100
	spec 'r' 'randomColor' 'random color'
	spec 'r' '[tft:getWidth]' 'TFT width'
	spec 'r' '[tft:getHeight]' 'TFT height'
	spec ' ' '[tft:enableDisplay]' 'enable TFT _' 'bool' true

to makeColor r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to randomColor {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}


module Turtle Output
author MicroBlocks
version 1 1 
depends TFT 
tags tft graphics draw 
description 'Draw with turtle geometry on boards with a TFT display, such as the M5Stack, M5Stick, Citilab ED1 or (discontinued) IoT-Bus.'
variables _turtleX _turtleY _turtleHeading _turtlePenIsDown _turtleColor 

	spec ' ' 'home' 'home'
	spec ' ' 'move' 'move _' 'auto' '10'
	spec ' ' 'turnBy' 'turn _ degrees' 'auto' 90
	spec ' ' 'turnFraction' 'turn _ / _ of circle' 'auto auto' 1 4
	spec ' ' 'pen down' 'pen down'
	spec ' ' 'pen up' 'pen up'
	spec ' ' 'set pen color to' 'set pen color to _' 'color'
	spec ' ' 'setPenToRandomColor' 'set pen to random color'
	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' 'clearDisplay' 'fill display with _' 'color'
	spec ' ' 'go to x' 'go to x _ y _' 'auto auto' '10' '10'
	spec ' ' 'setHeading' 'point in direction _' 'auto' 0
	spec ' ' '_turtleNotes' '_turtleNotes'

to '_turtleNotes' {
  comment 'Representation:
  _turtleHeading is in hundreths of a degree  (e.g. 4500 means 45 degrees)
  _turtleX and _turtleY are scaled by 16384 (2^14)

The sine function takes an angle in hundreds of a degree and returns a
number scaled by 16384. _turtleX and _turtleY are also scaled by 16384.
Those numbers are shifted right by 14 bits to get pixel locations.'
  local 'ignore' 0
}

to clearDisplay color {
  '[tft:rect]' 0 0 ('[tft:getWidth]') ('[tft:getHeight]') color true
  comment 'Give the display controller time to finish this operation'
  waitMillis 1
}

to 'go to x' x y {
  local 'startX' (_turtleX >> 14)
  local 'startY' (_turtleY >> 14)
  _turtleX = (((('[tft:getWidth]') / 2) + x) << 14)
  _turtleY = (((('[tft:getHeight]') / 2) + y) << 14)
  local 'endX' (_turtleX >> 14)
  local 'endY' (_turtleY >> 14)
  if _turtlePenIsDown {
    '[tft:line]' startX startY endX endY _turtleColor
  }
}

to home {
  if (0 == _turtlePenIsDown) {
    '[tft:enableDisplay]' true
    'set pen color to' (colorSwatch 7 255 1 255)
    '[display:mbDisplayOff]'
    'pen up'
  }
  'go to x' 0 0
  setHeading 0
}

to move n {
  local 'startX' (_turtleX >> 14)
  local 'startY' (_turtleY >> 14)
  comment 'The cosine is just the sine shifted by 90 degrees.'
  _turtleX += (n * ('[misc:sin]' (_turtleHeading + 9000)))
  _turtleY += (n * ('[misc:sin]' _turtleHeading))
  local 'endX' (_turtleX >> 14)
  local 'endY' (_turtleY >> 14)
  if _turtlePenIsDown {
    '[tft:line]' startX startY endX endY _turtleColor
  }
}

to 'pen down' {
  _turtlePenIsDown = (booleanConstant true)
}

to 'pen up' {
  _turtlePenIsDown = (booleanConstant false)
}

to 'set pen color to' color {
  _turtleColor = color
}

to setHeading a {
  _turtleHeading = ((a * 100) % 36000)
}

to setPenToRandomColor {
  local 'c1' (random 150 220)
  local 'c2' (random 0 ((3 * c1) / 4))
  local 'c3' (random 0 ((3 * c1) / 4))
  local 'which' (random 1 3)
  if (1 == which) {
    _turtleColor = ((c1 << 16) | ((c2 << 8) | c3))
  } (2 == which) {
    _turtleColor = ((c2 << 16) | ((c3 << 8) | c1))
  } else {
    _turtleColor = ((c3 << 16) | ((c1 << 8) | c2))
  }
}

to turnBy a {
  _turtleHeading += (a * 100)
  _turtleHeading = (_turtleHeading % 36000)
}

to turnFraction num denom {
  _turtleHeading += ((num * 36000) / denom)
  _turtleHeading = (_turtleHeading % 36000)
}

