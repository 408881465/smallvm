module main
author unknown
version 1 0 
description ''
variables worm direction apple 

	spec ' ' 'draw worm' 'draw worm'
	spec ' ' 'move worm' 'move worm'
	spec ' ' 'turn left' 'turn left'
	spec ' ' 'turn right' 'turn right'
	spec ' ' 'draw apple' 'draw new apple'
	spec ' ' 'grow worm' 'grow worm'
	spec 'r' 'touching apple' 'touching apple'
	spec ' ' 'new game' 'new game'
	spec 'r' 'worm contains apple' 'worm contains apple'
	spec 'r' 'worm should die' 'worm should die'

to 'draw apple' {
  comment 'needs to make sure apple is in free spot'
  apple = ('[data:makeList]' (random 1 5) (random 1 5))
  if ('worm contains apple') {
    repeatUntil (not ('worm contains apple')) {
      apple = ('[data:makeList]' (random 1 5) (random 1 5))
    }
  }
  '[display:mbPlot]' (at 1 apple) (at 2 apple)
}

to 'draw worm' {
}

to 'grow worm' {
  local 'tail' (at 1 worm)
  local 'new worm' ('[data:makeList]' '')
  for part worm {
    '[data:addLast]' part (v 'new worm')
  }
  'move worm'
  atPut 1 (v 'new worm') tail
  worm = (v 'new worm')
}

to 'move worm' {
  local 'head' (at 'last' worm)
  '[display:mbUnplot]' (at 1 (at 1 worm)) (at 2 (at 1 worm))
  for index ((size worm) - 1) {
    local 'next' 0
    atPut index worm (at (index + 1) worm)
  }
  atPut 'last' worm ('[data:makeList]' ((at 1 head) + (at 1 direction)) ((at 2 head) + (at 2 direction)))
  '[display:mbPlot]' (at 1 (at 'last' worm)) (at 2 (at 'last' worm))
}

to 'new game' {
  '[display:mbDisplayOff]'
  worm = ('[data:makeList]' ('[data:makeList]' 3 3))
  direction = ('[data:makeList]' 1 0)
}

to 'touching apple' {
  local 'head' (at 'last' worm)
  return (and ((at 1 head) == (at 1 apple)) ((at 2 head) == (at 2 apple)))
}

to 'turn left' {
  if ((at 1 direction) == 1) {
    direction = ('[data:makeList]' 0 -1)
  } ((at 2 direction) == -1) {
    direction = ('[data:makeList]' -1 0)
  } ((at 1 direction) == -1) {
    direction = ('[data:makeList]' 0 1)
  } else {
    direction = ('[data:makeList]' 1 0)
  }
}

to 'turn right' {
  if ((at 1 direction) == 1) {
    direction = ('[data:makeList]' 0 1)
  } ((at 2 direction) == 1) {
    direction = ('[data:makeList]' -1 0)
  } ((at 1 direction) == -1) {
    direction = ('[data:makeList]' 0 -1)
  } else {
    direction = ('[data:makeList]' 1 0)
  }
}

to 'worm contains apple' {
  for part worm {
    if (and ((at 1 part) == (at 1 apple)) ((at 2 part) == (at 2 apple))) {return (booleanConstant true)}
  }
  return (booleanConstant false)
}

to 'worm should die' {
  local 'head' (at 'last' worm)
  if (or (or ((at 1 head) > 5) ((at 2 head) > 5)) (or ((at 1 head) < 1) ((at 2 head) < 1))) {
    return (booleanConstant true)
  }
  for index ((size worm) - 1) {
    local 'part' (at index worm)
    if (and ((at 1 part) == (at 1 head)) ((at 2 part) == (at 2 head))) {
      return (booleanConstant true)
    }
  }
  return (booleanConstant false)
}

script 49 49 {
comment 'The classic Snake game, but in a smaller scale!'
}

script 49 106 {
whenStarted
'new game'
forever {
  'draw apple'
  repeatUntil ('touching apple') {
    'move worm'
    waitMillis 500
    if ('worm should die') {
      '[display:mbDisplay]' 18284874
      waitUntil (or (buttonA) (buttonB))
      'new game'
    } ((size worm) == 24) {
      '[display:mbDisplay]' 15237450
      waitUntil (or (buttonA) (buttonB))
      'new game'
    }
  }
  'grow worm'
}
}

script 451 109 {
whenButtonPressed 'A'
'turn left'
}

script 451 212 {
whenButtonPressed 'B'
'turn right'
}


module 'LED Display' Output
author MicroBlocks
version 1 1 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) also support this primitives in a simulated "fat pixel" display.'

	spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
	spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
	spec ' ' 'displayCharacter' 'display character _' 'str' 'A'

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

