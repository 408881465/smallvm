module main
author unknown
version 1 0 
description ''
variables msg2send letter alphabet 'sending-flag' 

	spec ' ' 'blink' 'blink'
	spec ' ' 'letters' 'letters'
	spec ' ' 'flash' 'flash'

to blink {
  setUserLED true
  waitMillis 500
  setUserLED false
  waitMillis 500
}

to flash {
  repeat 3 {
    '[display:mbDisplay]' 33554431
    waitMillis 500
    '[display:mbDisplayOff]'
    waitMillis 500
  }
}

to letters {
  alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ.!?:()&#+-*/=0123456789'
}

script 856 89 {
to flash {}
}

script 488 97 {
whenStarted
comment 'set to same 
number as the
person(s) you 
want to share
messages with'
'[radio:setGroup]' 0
}

script 689 99 {
to blink {}
}

script 227 100 {
whenCondition ('[radio:messageReceived]')
'[display:mbDisplayOff]'
comment 'blink = msg received
tilt face down a little to
display it on LEDs'
repeatUntil (('[sensors:tiltZ]') < -20) {
  blink
}
flash
scroll_text ('[radio:receivedString]')
}

script 78 105 {
whenStarted
msg2send = ''
letter = 1
letters
'[display:mbDisplay]' 4291652
}

script 472 273 {
whenCondition ('button pressed' 'B')
comment 'Add selected letter to message '
if (not sending-flag) {
  msg2send = ('[data:join]' msg2send (at letter alphabet))
  displayCharacter '+'
  waitMillis 500
  displayCharacter (at letter alphabet)
}
}

script 83 330 {
whenButtonPressed 'A'
comment 'Keep pushing until desired letter shown'
displayCharacter (at letter alphabet)
repeatUntil (not (buttonA)) {
  comment 'tilt left (-x) for backward selection'
  if (('[sensors:tiltX]') < 0) {
    comment 'tilt more to scroll letters faster'
    waitMillis (500 - ((absoluteValue ('[sensors:tiltX]')) * 5))
    letter += -1
  } else {
    comment 'tilt right (+x) for forward selection'
    waitMillis (500 - ((absoluteValue ('[sensors:tiltX]')) * 5))
    letter += 1
  }
  if (letter < 1) {
    letter = (size alphabet)
  } (letter > (size alphabet)) {
    letter = 1
  }
  displayCharacter (at letter alphabet)
}
}

script 477 548 {
whenCondition ('button double pressed' 'B')
comment 'Add a space'
msg2send = ('[data:join]' msg2send ' ')
displayCharacter '_'
waitMillis 500
displayCharacter (at letter alphabet)
}

script 478 761 {
whenCondition ('button long pressed' 'B')
'[display:mbDisplayOff]'
comment 'Preview message'
scroll_text msg2send
waitMillis 500
displayCharacter (at letter alphabet)
}

script 572 966 {
whenCondition (('[sensors:acceleration]') > 280)
comment 'Shake hard to clear 
message to send'
msg2send = ''
'[display:mbDisplay]' 4291652
}

script 84 978 {
to letters {}
}

script 280 1077 {
whenButtonPressed 'A+B'
sending-flag = (booleanConstant true)
'[display:mbDisplayOff]'
comment 'Send message'
'[radio:sendString]' msg2send
scroll_text msg2send
sending-flag = (booleanConstant false)
waitMillis 500
'[display:mbDisplay]' 2269696
}


module 'Basic Sensors' Input
author MicroBlocks
version 1 0 
tags tilt acceleration light sensor 
description 'Provides blocks to read tilt in the three axes, acceleration, temperature and light level. Many boards come with this particular set of sensors, such as the micro:bit, the Circuit Playground Express, the Calliope or the Citilab ED1.'

	spec 'r' '[sensors:tiltX]' 'tilt x'
	spec 'r' '[sensors:tiltY]' 'tilt y'
	spec 'r' '[sensors:tiltZ]' 'tilt z'
	spec 'r' '[sensors:acceleration]' 'acceleration'
	spec 'r' '[display:lightLevel]' 'light level'
	spec 'r' '[sensors:temperature]' 'temperature (Â°C)'

module 'Button Events' Input
author MicroBlocks
version 1 0 
tags event button double long press 
description 'Provides blocks to detect press, long press and double press events on buttons.'
variables _buttons 

	spec 'r' 'button double pressed' 'button _ double pressed' 'auto' 'A'
	spec 'r' 'button long pressed' 'button _ long pressed' 'auto' 5
	spec 'r' 'button pressed' 'button _ pressed' 'auto' 5
	spec 'r' '_button' '_button _' 'auto' 10
	spec ' ' '_updateButtons' '_updateButtons'
	spec 'r' '_read button' '_read button _' 'auto' 10

to '_button' 'pin or name' {
  '_updateButtons'
  for 'each button' _buttons {
    if ((at 1 (v 'each button')) == (v 'pin or name')) {return (v 'each button')}
  }
  comment 'This button has not been initialized. Let''s add it.'
  local 'new button' ('[data:makeList]' (v 'pin or name') '' '' 'waiting')
  '[data:addLast]' (v 'new button') _buttons
  return (v 'new button')
}

to '_read button' 'pin or name' {
  if ((v 'pin or name') == 'A') {
    return (buttonA)
  } ((v 'pin or name') == 'B') {
    return (buttonB)
  } else {
    return (digitalReadOp (v 'pin or name'))
  }
}

to '_updateButtons' {
  if (_buttons == 0) {_buttons = ('[data:makeList]')}
  for button _buttons {
    local 'currently pressed' ('_read button' (at 1 button))
    local 'previous state' (at 4 button)
    if (and ((v 'previous state') == 'waiting') (v 'currently pressed')) {
      comment 'save state change time'
      atPut 2 button (millisOp)
      atPut 3 button (v 'currently pressed')
      atPut 4 button 'pressed'
    } (and ((v 'previous state') == 'pressed') (not (v 'currently pressed'))) {
      local 'press time' ((millisOp) - (at 2 button))
      comment 'There''s been a press. Let''s check how long it was.'
      if ((v 'press time') > 500) {
        atPut 4 button 'long press'
      } ((v 'press time') > 250) {
        atPut 4 button 'single press'
      } else {
        comment 'This is an internal intermediate state.
It could turn out to be a single press or a double press.'
        atPut 2 button (millisOp)
        atPut 4 button 'short press'
      }
    } (and ((v 'previous state') == 'short press') (v 'currently pressed')) {
      atPut 4 button 'double press'
    } (and (and ((v 'previous state') == 'short press') (not (v 'currently pressed'))) (((millisOp) - (at 2 button)) > 250)) {
      atPut 4 button 'single press'
    } (and ((v 'previous state') == 'double press handled') (not (v 'currently pressed'))) {
      comment 'We only go back to "waiting" after a double press if the event has been handled
and the user has released the button. Otherwise we''ll cause false "single press"
positives.'
      atPut 4 button 'waiting'
    }
  }
}

to 'button double pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'double press') {
    comment 'We only go back to "waiting" after a double press if the event has been handled
and the user has released the button. Otherwise we''ll cause false "single press"
positives.'
    atPut 4 button 'double press handled'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}

to 'button long pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'long press') {
    atPut 4 button 'waiting'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}

to 'button pressed' 'pin or name' {
  local 'button' ('_button' (v 'pin or name'))
  local 'state' (at 4 button)
  if (state == 'single press') {
    atPut 4 button 'waiting'
    return (booleanConstant true)
  }
  return (booleanConstant false)
}


module 'LED Display' Output
author MicroBlocks
version 1 0 
tags pixel matrix led tft 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) also support this primitives in a simulated "fat pixel" display.'

	spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237450
	spec ' ' '[display:mbDisplayOff]' 'clear display'
	spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
	spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
	spec ' ' 'displayCharacter' 'display character _' 'str' 'A'

to displayCharacter s {
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}


module Radio Comm
author MicroBlocks
version 1 0 
tags radio communication messaging network 
description 'Send and receive messages between micro:bit boards via their built-in radio system.'

	spec ' ' '[radio:sendInteger]' 'radio send number _' 'num' 123
	spec ' ' '[radio:sendString]' 'radio send string _' 'str' 'Hello!'
	spec ' ' '[radio:sendPair]' 'radio send pair _ = _' 'str num' 'light' 10
	spec 'r' '[radio:messageReceived]' 'radio message received?'
	spec 'r' '[radio:receivedInteger]' 'radio last number'
	spec 'r' '[radio:receivedString]' 'radio last string'
	spec ' ' '[radio:setGroup]' 'radio set group _' 'num' 0
	spec ' ' '[radio:setPower]' 'radio set power (0-7) _' 'num' 4
	spec 'r' '_receivedMessageType' '_radio last message type'
	spec ' ' '_radio receive packet' '_radio receive packet _' 'str' '32-element list'
	spec ' ' '_radio send packet' '_radio send packet _' 'str' '32-element list'
	spec 'r' '_signalStrength' '_radio last signal strength'
	spec ' ' '_setChannel' '_radio set channel (0-83) _' 'num' 7

to '_radio receive packet' list {
  '[radio:packetReceive]' list
}

to '_radio send packet' packet {
  '[radio:packetSend]' packet
}

to '_receivedMessageType' {
  return ('[radio:receivedMessageType]')
}

to '_setChannel' channel {
  '[radio:setChannel]' channel
}

to '_signalStrength' {
  return ('[radio:signalStrength]')
}


module Scrolling Output
author MicroBlocks
version 1 0 
depends 'LED Display' 
tags animation text pixel matrix led tft 
description 'Scroll text across the screen of the 5x5 LED display on the BBC micro:bit, Calliope mini or M5Atom Matrix. Also works on boards with a TFT display by simulating the 5x5 matrix with "fat pixels".'
variables _digit_shapes _digit_shapes_start_index _stop_scrolling_text 

	spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
	spec ' ' 'scroll_number' 'scroll number _ : pausing _ ms' 'num num' 123 100
	spec ' ' '_covert_to_shapes' '_covert_to_shapes _' 'num' 42
	spec ' ' '_scroll_digit_shapes' '_scroll_digit_shapes _' 'num' 100
	spec ' ' 'stopScrollingText' 'stop scrolling'

to '_covert_to_shapes' n {
  if (_digit_shapes == 0) {_digit_shapes = (newList 12)}
  fillList _digit_shapes ('[display:mbShapeForLetter]' ' ')
  local 'index' (size _digit_shapes)
  local 'isNegative' (booleanConstant false)
  if (n < 0) {
    isNegative = (booleanConstant true)
    n = (0 - n)
  } (n == 0) {
    atPut index _digit_shapes ('[display:mbShapeForLetter]' '0')
    _digit_shapes_start_index = index
  }
  repeatUntil (n == 0) {
    local 'digit' (n % 10)
    atPut index _digit_shapes ('[display:mbShapeForLetter]' (48 + digit))
    index += -1
    n = (n / 10)
  }
  if isNegative {
    atPut index _digit_shapes ('[display:mbShapeForLetter]' '-')
    index += -1
  }
  _digit_shapes_start_index = index
}

to '_scroll_digit_shapes' delay {
  _stop_scrolling_text = (booleanConstant false)
  local 'prevShape' ('[display:mbShapeForLetter]' ' ')
  local 'i' _digit_shapes_start_index
  local 'end' ((size _digit_shapes) + 1)
  repeatUntil (i > end) {
    local 'shape' ('[display:mbShapeForLetter]' ' ')
    if (i < end) {
      shape = (at i _digit_shapes)
    }
    for j 5 {
      local 'x' (1 - j)
      '[display:mbDrawShape]' prevShape x 1
      '[display:mbDrawShape]' shape (x + 5) 1
      waitMillis delay
      if _stop_scrolling_text {
        '[display:mbDisplayOff]'
        return 0
      }
    }
    prevShape = shape
    i += 1
  }
}

to scroll_number n optionalDelay {
  delay = 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  '_covert_to_shapes' n
  '_scroll_digit_shapes' delay
}

to scroll_text text optionalDelay {
  delay = 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  local 'length' (size text)
  for position ((length * 6) + 6) {
    if _stop_scrolling_text {return 0}
    for i length {
      '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
    }
    waitMillis delay
  }
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}

