module 'WuKong2040'
author Elecfreaks
version 1 0
tags pico picow wukong2040 wukong2040 pico picow
choices wk2040_motorMenu M1 M2 M3 M4
description 'Elecfreaks WuKong2040 multi-function expansion board.

Features:
  Raspberry Pi Pico/PicoW
  14 × Expansion GPIO Ports (including SPI\IIC\UART)
   4 × Motor Driving
   2 × Rainbow LED
   2 × Button
   1 × Buzzer

Power Supply:
  18650 Lithium Battery

Pins:
  Buzzer = 9
  Button_A = 18
  Button_B = 19
  RGB_LED = 22
  Motor_M1 = 20, 21
  Motor_M2 = 10, 11
  Motor_M3 = 14, 15
  Motor_M4 = 12, 13

  UART_TX = 0
  UART_RX = 1

  SPI_SCK = 2
  SPI_MOSI = 3
  SPI_MISO = 4
  SPI_SS = 5

  IIC_SDA = 16
  IIC_SCL = 17
'
variables _wk2040_pixels

  spec ' ' 'wk2040_set_all_LEDs_color' 'WuKong2040 set all LEDs color _' 'color'
  spec ' ' 'wk2040_set_all_LEDs_RGB' 'WuKong2040 set all LEDs R _ G _ B _ (0~255)' 'num num num' 255 0 0
  spec ' ' 'wk2040_turn_off_all_LEDs' 'WuKong2040 turn off all LEDs'
  space
  spec ' ' 'wk2040_set_LED_color' 'WuKong2040 set LED _ color _' 'num color' 1
  spec ' ' 'wk2040_set_LED_RGB' 'WuKong2040 set LED _ R _ G _ B _ (0~255)' 'num num num num' 1 0 0 255
  space
  spec ' ' 'wk2040_set_motor_speed' 'WuKong2040 motor _ speed (-100~100) _' 'menu.wk2040_motorMenu num' 'M1' 50
  spec ' ' 'wk2040_stop_all_motors' 'WuKong2040 stop all motors'
  space
  spec ' ' 'wk2040_beep' 'WuKong2040 beep'
  spec ' ' 'wk2040_beat' 'WuKong2040 buzzer beat _ ms' 'auto' '1000'
  spec ' ' 'wk2040_click' 'WuKong2040 click'
  spec ' ' '_wk2040_initLEDs' '_wk2040_initLEDs'
  spec 'r' '_wk2040_colorFromRGB' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100

to 'wk2040_set_motor_speed' motor speed {
  if ('M1' == motor) {
    _wk2040_set_motor_speed 20 21 speed
  } ('M2' == motor) {
    _wk2040_set_motor_speed 10 11 speed
  } ('M3' == motor) {
    _wk2040_set_motor_speed 15 14 speed
  } ('M4' == motor) {
    _wk2040_set_motor_speed 13 12 speed
  }
}

to '_wk2040_set_motor_speed' pin1 pin2 speed {
  if (speed < 0) {
    analogWriteOp pin1 ('[misc:rescale]' (absoluteValue speed) 0 100 0 1023)
    analogWriteOp pin2 0
  } else {
    analogWriteOp pin2 ('[misc:rescale]' speed 0 100 0 1023)
    analogWriteOp pin1 0
  }
}

to 'wk2040_stop_all_motors' {
  wk2040_set_motor_speed 'M1' 0
  wk2040_set_motor_speed 'M2' 0
  wk2040_set_motor_speed 'M3' 0
  wk2040_set_motor_speed 'M4' 0
}

to wk2040_beep {
  local 'pin_buzzer' 9
  '[io:playTone]' pin_buzzer 440
  waitMillis 100
  '[io:playTone]' pin_buzzer 0
}

to 'wk2040_beat' duratiom {
  local 'pin_buzzer' 9
  local 'end time' ((millisOp) + duratiom)
  repeatUntil ((millisOp) >= (v 'end time')) {
    digitalWriteOp pin_buzzer true
    waitMillis 400
    digitalWriteOp pin_buzzer false
    waitMillis 400
  }
}

to 'wk2040_click' {
  local 'pin_buzzer' 9
  digitalWriteOp pin_buzzer true
  waitMillis 1
  digitalWriteOp pin_buzzer false
}

to '_wk2040_initLEDs' {
  '[display:neoPixelSetPin]' -1 false
  if (not (isType _wk2040_pixels 'list')) {
    _wk2040_pixels = (newList 2)
  }
}

to '_wk2040_colorFromRGB' r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to wk2040_set_all_LEDs_color color {
  '_wk2040_initLEDs'
  atPut 'all' _wk2040_pixels color
  '[display:neoPixelSend]' _wk2040_pixels
  waitMicros 150
}

to wk2040_set_LED_color num color {
  '_wk2040_initLEDs'
  if (and (1 <= num) (num <= 2)) {
    atPut num _wk2040_pixels color
    '[display:neoPixelSend]' _wk2040_pixels
    waitMicros 150
  }
}

to 'wk2040_set_LED_RGB' num r g b {
  wk2040_set_LED_color num (_wk2040_colorFromRGB r g b)
}

to 'wk2040_turn_off_all_LEDs' {
  wk2040_set_all_LEDs_color 0
}

to 'wk2040_set_all_LEDs_RGB' r g b {
  wk2040_set_all_LEDs_color (_wk2040_colorFromRGB r g b)
}
