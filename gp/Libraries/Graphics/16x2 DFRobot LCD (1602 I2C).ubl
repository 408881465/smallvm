module '16x2 DFRobot LCD (1602 I2C)'
author MicroBlocks
version 1 1 
description 'Basic library for 16x2 displays with an I2C "backpack" like the ones commercialized by DFRobot, SunFounder and others.

Note that these displays need a 5v input, so you will need an external power source for 3.3v boards like the micro:bit.'

variables '_LCD1602 ADDR' '_LCD1602 WIDTH' '_LCD1602 LINE 1' '_LCD1602 LINE 2' '_LCD1602 BACKLIGHT' '_LCD1602 ENABLE' '_LCD1602 initialized' 

	spec ' ' '_LCD1602 init' '_LCD1602 init'
	spec ' ' '_LCD1602 send' '_LCD1602 send byte _ mode _' 'auto auto' '10' 1
	spec ' ' '_LCD1602 send command' '_LCD1602 send command _' 'auto' '10'
	spec ' ' '_LCD1602 send data' '_LCD1602 send data _' 'auto' '10'
	spec ' ' '_LCD1602 toggle enable' '_LCD1602 toggle enable _' 'auto' '10'
	spec ' ' 'clear LCD' 'clear LCD'
	spec ' ' 'write' 'write _ on LCD at line _' 'auto auto' 'Hello, World!' 1

to '_LCD1602 init' {
  '_LCD1602 ADDR' = (hexToInt '27')
  '_LCD1602 WIDTH' = 16
  '_LCD1602 SEND DATA MODE' = 1
  '_LCD1602 SEND COMMAND MODE' = 0
  '_LCD1602 LINE 1' = (hexToInt '80')
  '_LCD1602 LINE 2' = (hexToInt 'C0')
  '_LCD1602 BACKLIGHT' = (hexToInt '8')
  '_LCD1602 ENABLE' = 4
  comment 'Initialize display'
  '_LCD1602 send command' (hexToInt '33')
  '_LCD1602 send command' (hexToInt '32')
  '_LCD1602 send command' (hexToInt '06')
  '_LCD1602 send command' (hexToInt '0C')
  '_LCD1602 send command' (hexToInt '28')
  '_LCD1602 send command' (hexToInt '01')
  '_LCD1602 initialized' = (booleanConstant true)
  waitMillis 250
}

to '_LCD1602 send' bits mode {
  local 'high bits' ((mode | (bits & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  local 'low bits' ((mode | ((bits << 4) & (hexToInt 'F0'))) | (v '_LCD1602 BACKLIGHT'))
  '[sensors:i2cWrite]' (v '_LCD1602 ADDR') ('[data:makeList]' (v 'high bits'))
  '_LCD1602 toggle enable' (v 'high bits')
  '[sensors:i2cWrite]' (v '_LCD1602 ADDR') ('[data:makeList]' (v 'low bits'))
  '_LCD1602 toggle enable' (v 'low bits')
}

to '_LCD1602 send command' byte {
  '_LCD1602 send' byte 0
}

to '_LCD1602 send data' byte {
  '_LCD1602 send' byte 1
}

to '_LCD1602 toggle enable' bits {
  waitMicros 5
  '[sensors:i2cWrite]' (v '_LCD1602 ADDR') ('[data:makeList]' (bits | (v '_LCD1602 ENABLE')))
  waitMicros 5
  '[sensors:i2cWrite]' (v '_LCD1602 ADDR') ('[data:makeList]' (bits & ('~' (v '_LCD1602 ENABLE'))))
  waitMicros 5
}

to 'clear LCD' {
  if ((v '_LCD1602 initialized') == 0) {'_LCD1602 init'}
  '_LCD1602 send command' 1
}

to write string line {
  if ((v '_LCD1602 initialized') == 0) {'_LCD1602 init'}
  if (line == 2) {
    '_LCD1602 send command' (v '_LCD1602 LINE 2')
  } else {
    '_LCD1602 send command' (v '_LCD1602 LINE 1')
  }
  for i (size string) {
    '_LCD1602 send data' ('[data:unicodeAt]' i string)
  }
}

