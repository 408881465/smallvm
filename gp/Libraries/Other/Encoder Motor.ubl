module 'Encoder Motor' Output
author MicroBlocks
version 1 1 
depends Wukong 
description 'Control motors with digital encoder outputs using the Wukong board.
Pins 1 and 2 are the encoder inputs for the two motors.'
variables _encoderMotor_M1_degrees _encoderMotor_M2_degrees 

  spec ' ' 'encodeMotor_turnMotors' 'turn motor 1 _ motor 2 _ (degrees)' 'num num' 500 500
  spec ' ' '_encodeMotor_runM1' '_encodeMotor_runM1'
  spec ' ' '_encodeMotor_runM2' '_encodeMotor_runM2'
  spec ' ' '_encodeMotor_run' '_run motor _' 'num' 1
  spec ' ' '_encodeMotor_stepMotor' '_step motor _ by _ steps power _' 'num num num' 1 100 50
  spec ' ' '_encodeMotor_waitForStop' '_encodeMotor_waitForStop _' 'num' 1

to '_encodeMotor_run' motor {
  if (motor == 1) {
    local 'degrees' _encoderMotor_M1_degrees
  } else {
    local 'degrees' _encoderMotor_M2_degrees
  }
  local 'dir' 1
  if (degrees < 0) {
    dir = -1
    degrees = (0 - degrees)
  }
  degrees = (maximum degrees 4)
  if (degrees >= 20) {
    '_encodeMotor_stepMotor' motor (degrees - 1) (30 * dir)
    wukong_setMotor motor (-100 * dir)
    '_encodeMotor_waitForStop' motor
  } else {
    '_encodeMotor_stepMotor' motor (degrees - 1) (30 * dir)
    wukong_setMotor motor (-50 * dir)
    '_encodeMotor_waitForStop' motor
  }
  wukong_setMotor motor 0
}

to '_encodeMotor_runM1' {
  comment 'Motor1 task.'
  '_encodeMotor_run' 1
  _encoderMotor_M1_degrees = 0
}

to '_encodeMotor_runM2' {
  comment 'Motor2 task.'
  '_encodeMotor_run' 2
  _encoderMotor_M2_degrees = 0
}

to '_encodeMotor_stepMotor' m steps power {
  wukong_setMotor m power
  repeat steps {
    waitUntil (digitalReadOp m)
    waitUntil (not (digitalReadOp m))
  }
}

to '_encodeMotor_waitForStop' encoderPin {
  local 'last state' (booleanConstant false)
  local 'last pulse start' (microsOp)
  local 'usecs since last pulse' 0
  repeatUntil ((v 'usecs since last pulse') > 5000) {
    local 'state' (digitalReadOp encoderPin)
    local 'now' (microsOp)
    if (now < (v 'last pulse start')) {
      comment 'Handle clock wrap'
      'last pulse start' = 0
    }
    if (state != (v 'last state')) {
      if state {'last pulse start' = now}
      'last state' = state
    }
    'usecs since last pulse' = (now - (v 'last pulse start'))
  }
}

to encodeMotor_turnMotors degrees1 degrees2 {
  _encoderMotor_M1_degrees = degrees1
  _encoderMotor_M2_degrees = degrees2
  sendBroadcast '_encodeMotor_runM1'
  sendBroadcast '_encodeMotor_runM2'
  waitUntil (and (_encoderMotor_M1_degrees <= 0) (_encoderMotor_M2_degrees <= 0))
}

