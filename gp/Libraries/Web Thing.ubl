module 'Web of Things (HTTP server)'
variables _WoT_title _WoT_events _WoT_capability _WoT_event_defs _WoT_property_defs

	spec ' ' 'set thing name to' 'set thing name to _' 'auto' 'MicroBlocks thing'
	spec ' ' 'set thing capability to' 'set thing capability to _' 'str.thingTypesMenu' 'Light'
	spec ' ' 'register event' 'register event _ type _' 'auto str.thingEventTypesMenu' 'Button A pressed' 'PressedEvent'
	spec ' ' 'start WebThing server' 'start WebThing server'
	spec ' ' 'trigger event' 'trigger event _' 'auto' 'button pressed'
	spec 'r' 'thing description JSON' 'thing description JSON'
	spec 'r' 'properties JSON' 'properties JSON'
	spec 'r' 'event definitions JSON' 'event definitions JSON'
	spec 'r' 'events JSON' 'events JSON'
	spec ' ' '_process OPTIONS request' '_process OPTIONS request _' 'auto' ''
	spec ' ' '_process PUT request' '_process PUT request _' 'auto' ''
	spec ' ' '_process request' '_process GET request _' 'auto' ''
	spec ' ' '_respond 404 Not Found' '_respond 404 Not Found'
	spec 'r' '_JSON value' '_JSON value _' 'auto' '10'
	spec ' ' '_next JSON list item index' '_next JSON list item index _' 'auto' ''
	spec 'r' '_parse JSON value' '_parse JSON value _' 'auto' ''
	spec 'r' '_trimmed' '_trimmed _' 'auto' '  hello    '
	spec ' ' '_WoT_start_server' '_WoT_start_server'
	spec 'r' '_type of' '_type of _' 'auto' '10'
	spec ' ' 'addBooleanProperty' 'set boolean property _ title _ @Type _ : read only _' 'menu.allVarsMenu str str.booleanPropertyTypesMenu bool' '' '' 'OnOffProperty' false
	spec ' ' 'addNumProp' 'set number property _ title _ min _ max _ @Type _ : read only _' 'menu.allVarsMenu str num num str.numberPropertyTypesMenu bool' '' '' 0 100 'LevelProperty' false
	spec ' ' 'addStringProperty' 'set string property _ title _ @Type _ : read only _' 'menu.allVarsMenu str str.stringPropertyTypesMenu bool' '' '' 'ColorProperty' false
	spec ' ' '_add or replace property' '_add or replace property _ title _ @Type _ read only _' 'menu.allVarsMenu str str str' '' '' '' ''

to '_JSON value' value {
  local 'JSON value' ''
  if ('[data:isType]' value 'string') {
    'JSON value' = ('[data:join]' '"' value '"')
  } ('[data:isType]' value 'list') {
    'JSON value' = '['
    for item value {
      'JSON value' = ('[data:join]' (v 'JSON value') ('_JSON value' item) ',')
    }
    'JSON value' = ('[data:join]' ('[data:copyFromTo]' (v 'JSON value') 1 ((size (v 'JSON value')) - 1)) ']')
  } ('[data:isType]' value 'boolean') {
    if value {
      'JSON value' = 'true'
    } else {
      'JSON value' = 'false'
    }
  } else {
    'JSON value' = value
  }
  return (v 'JSON value')
}

to '_WoT_start_server' {
  '[net:startHttpServer]'
  local 'request' ''
  forever {
    request = ('[net:httpServerGetRequest]')
    if (request != (booleanConstant false)) {
      if (('request method' request) == 'GET') {
        '_process request' request
      } (('request method' request) == 'PUT') {
        '_process PUT request' request
      } (('request method' request) == 'OPTIONS') {
        '_process OPTIONS request' request
      } else {
        '_respond 404 Not Found'
      }
    }
    waitMillis 50
  }
}

to '_add or replace property' varName title type readonly {
  if (_WoT_property_defs == 0) {_WoT_property_defs = ('[data:makeList]')}
  for def _WoT_property_defs {
    if ((at 1 def) == varName) {
      atPut 2 def title
      atPut 3 def type
      atPut 4 def readonly
      return ''
    }
  }
  '[data:addLast]' ('[data:makeList]' varName title type readonly) _WoT_property_defs
}

to '_next JSON list item index' JSON {
}

to '_parse JSON value' JSON {
  local 'value' ('_trimmed' JSON)
  if ((at 1 value) == '"') {
    comment 'Doesn''t handle \\"
Please don''t be _that_ picky ;)'
    value = ('[data:copyFromTo]' value 2 ((size value) - 1))
    local 'escaped quote index' ('[data:find]' '\"' value)
    repeatUntil ((v 'escaped quote index') == -1) {
      value = ('[data:join]' ('[data:copyFromTo]' value 1 ((v 'escaped quote index') - 1)) ('[data:copyFromTo]' value ((v 'escaped quote index') + 2)))
      'escaped quote index' = ('[data:find]' '\"' value)
    }
  } ((at 1 value) == '[') {
    comment 'Doesn''t handle multi-dimensional lists'
    local 'list' ('[data:makeList]')
    value = ('[data:copyFromTo]' value 2 ((size value) - 1))
    local 'comma index' ('[data:find]' ',' value)
    repeatUntil ((v 'comma index') == -1) {
      '[data:addLast]' ('_parse JSON value' ('[data:copyFromTo]' value 1 ((v 'comma index') - 1))) list
      value = ('[data:copyFromTo]' value ((v 'comma index') + 1))
      'comma index' = ('[data:find]' ',' value)
    }
    '[data:addLast]' ('_parse JSON value' value) list
    value = list
  } (value == 'true') {
    value = (booleanConstant true)
  } (value == 'false') {
    value = (booleanConstant false)
  } else {
    value = (value + 0)
  }
  return value
}

to '_process OPTIONS request' req {
  '[net:respondToHttpRequest]' '200 OK' '' 'Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: PUT, GET, OPTIONS
Access-Control-Allow-Headers: Content-Type'
}

to '_process PUT request' req {
  local 'path' ('path of request' req)
  if (('[data:find]' '/properties/' path) > 0) {
    local 'varName' ('[data:copyFromTo]' path 13)
    if (varExists varName) {
      local 'body' ('body of request' req)
      setVarNamed varName ('_parse JSON value' ('[data:copyFromTo]' body (('[data:find]' ':' body) + 1) (('[data:find]' '}' body) - 1)))
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"' varName '":' ('_JSON value' (varNamed varName)) '}') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
    } else {
      '_respond 404 Not Found'
    }
  } else {
    '_respond 404 Not Found'
  }
}

to '_process request' req {
  local 'path' ('path of request' req)
  if (path == '/') {
    '[net:respondToHttpRequest]' '200 OK' ('thing description JSON') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
  } (or (path == '/properties') (path == '/properties/')) {
    '[net:respondToHttpRequest]' '200 OK' ('properties JSON') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
  } (('[data:find]' '/properties/' path) > 0) {
    local 'varName' ('[data:copyFromTo]' path 13)
    if (varExists varName) {
      '[net:respondToHttpRequest]' '200 OK' ('[data:join]' '{"' varName '":' ('_JSON value' (varNamed varName)) '}') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
    } else {
      '_respond 404 Not Found'
    }
  } (or (path == '/events') (path == '/events/')) {
    '[net:respondToHttpRequest]' '200 OK' ('events JSON') 'Access-Control-Allow-Origin: *
Content-Type: application/json'
    _WoT_events = ('[data:makeList]')
  } else {
    '_respond 404 Not Found'
  }
}

to '_respond 404 Not Found' {
  '[net:respondToHttpRequest]' '404 Not Found' '{ "error":"Resource not found" }' 'Access-Control-Allow-Origin: *
Content-Type: application/json'
}

to '_trimmed' string {
  comment 'remove surrounding spaces'
  repeatUntil ((at 1 string) != ' ') {
    string = ('[data:copyFromTo]' string 2)
  }
  repeatUntil ((at 'last' string) != ' ') {
    string = ('[data:copyFromTo]' string 1 ((size string) - 1))
  }
  return string
}

to '_type of' value {
  if ('[data:isType]' value 'number') {
    return 'number'
  } ('[data:isType]' value 'list') {
    return 'array'
  } ('[data:isType]' value 'string') {
    return 'string'
  } ('[data:isType]' value 'boolean') {
    return 'boolean'
  }
  comment 'should never happen'
  return 'null'
}

to addBooleanProperty varName title type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 3) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName title type readonly
}

to addNumProp varName title type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 3) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName title type readonly
}

to addStringProperty varName title type optionalReadOnly {
  local 'readonly' (booleanConstant false)
  if ((pushArgCount) > 3) {
    readonly = optionalReadOnly
  }
  '_add or replace property' varName title type readonly
}

to 'event definitions JSON' {
  local 'JSON' '{'
  if (_WoT_event_defs == 0) {
    _WoT_event_defs = ('[data:makeList]')
  }
  for 'event def' _WoT_event_defs {
    JSON = ('[data:join]' JSON '"' (at 1 (v 'event def')) '":{"description":"MicroBlocks event","@type":"' (at 2 (v 'event def')) '"},')
  }
  if ((size JSON) > 1) {
    return ('[data:join]' ('[data:copyFromTo]' JSON 1 ((size JSON) - 1)) '}')
  } else {
    return '{}'
  }
}

to 'events JSON' {
  local 'JSON' '['
  for event _WoT_events {
    JSON = ('[data:join]' JSON '{"' (at 1 event) '":{"data":{"id":' (at 2 event) '}}},')
  }
  if ((size JSON) > 1) {
    return ('[data:join]' ('[data:copyFromTo]' JSON 1 ((size JSON) - 1)) ']')
  } else {
    return '[]'
  }
}

to 'properties JSON' {
  local 'JSON' '{'
  if (or (_WoT_property_defs == 0) ((size _WoT_property_defs) == 0)) {
    for varName (allVars) {
      if (not ((at 1 varName) == '_')) {
        local 'value' (varNamed varName)
        JSON = ('[data:join]' JSON '"' varName '":{"title":"' varName '","type":"' ('_type of' value) '","links":[{"href":"/properties/' varName '"}],"@type":""},')
      }
    }
  } else {
    for 'property def' _WoT_property_defs {
      local 'varName' (at 1 (v 'property def'))
      local 'value' (varNamed varName)
      JSON = ('[data:join]' JSON '"' varName '":{"title":"' (at 2 (v 'property def')) '","type":"' ('_type of' value) '","links":[{"href":"/properties/' varName '"}],"@type":"' (at 3 (v 'property def')) '","readonly":' ('_JSON value' (at 4 (v 'property def'))) '},')
    }
  }
  if ((size JSON) > 1) {
    return ('[data:join]' ('[data:copyFromTo]' JSON 1 ((size JSON) - 1)) '}')
  } else {
    return '{}'
  }
}

to 'register event' 'event title' 'event type' {
  local 'event def' ('[data:makeList]' (v 'event title') (v 'event type'))
  if (_WoT_event_defs == 0) {
    _WoT_event_defs = ('[data:makeList]')
  }
  '[data:addLast]' (v 'event def') _WoT_event_defs
}

to 'set thing capability to' capability {
  _WoT_capability = capability
}

to 'set thing name to' title {
  _WoT_title = title
}

to 'start WebThing server' {
  if (_WoT_title == 0) {'set thing name to' 'MicroBlocks thing'}
  if (_WoT_capability == 0) {'set thing capability to' ''}
  if (_WoT_events == 0) {_WoT_events = ('[data:makeList]')}
  sendBroadcastSimple '_WoT_start_server'
}

to 'thing description JSON' {
  return ('[data:join]' '{"title":"' _WoT_title '","@context":"https://iot.mozilla.org/schemas/","@type":["' _WoT_capability '"],"links":[{"rel":"events","href":"/events"},{"rel":"properties","href":"/properties"}],"properties":' ('properties JSON') ',"events":' ('event definitions JSON') '}')
}

to 'trigger event' 'event name' {
  '[data:addLast]' ('[data:makeList]' (v 'event name') (millisOp)) _WoT_events
}

