module 'Scales & Chords' Data
author MicroBlocks
version 1 1 
choices scales ionian dorian phrygian lydian mixolydian aeolian locrian 
choices pentatonics major minor 
choices chords major minor diminished 'major 7th' 'minor 7th' Maj7 
description 'Lists of relative semitone intervals for all Western diatonic scales plus the major and minor pentatonic scales.

It also includes intervals for the most common chords and progressions.
'

  spec 'r' 'scale' '_ scale root _ : steps _' 'menu.scales num num' 'ionian' 60 7
  spec 'r' 'pentatonic scale' 'pentatonic _ scale root _ : steps _' 'menu.pentatonics num num' 'major' 60 7
  space
  spec 'r' 'chord' '_ chord root _ : steps _' 'menu.chords num num' 'major' 60 4
  spec 'r' 'chord2 with roman numeral' '_ chord for root _ steps _' 'auto auto auto' 'IV' 60 4
  spec 'r' 'degrees' 'chord progression _ with root _' 'auto auto' 'I,IV,viiº,iii,vi,ii,V,I' 60
  space
  spec 'r' '_scales intervals' '_scales intervals _  with root _ and _ steps' 'auto auto auto' 'aList' 60 10
  spec 'r' '_scales diatonic intervals' '_scales diatonic intervals for _ scale' 'auto' 'ionian'
  spec 'r' '_scales pentatonic intervals for' '_scales pentatonic intervals for _ scale' 'auto' 'major'
  spec 'r' '_scales chord intervals for' '_scales chord intervals for _ chord' 'auto' 'diminished'

to '_scales chord intervals for' which {
  return (at ('[data:find]' which ('[data:makeList]' 'major' 'minor' 'diminished' 'major 7th' 'minor 7th' 'Maj7')) ('[data:makeList]' ('[data:makeList]' 0 4 7) ('[data:makeList]' 0 3 7) ('[data:makeList]' 0 3 6) ('[data:makeList]' 0 3 7 10) ('[data:makeList]' 0 3 7 10) ('[data:makeList]' 0 4 7 11)))
}

to '_scales diatonic intervals' which {
  return (at ('[data:find]' which ('[data:makeList]' 'ionian' 'dorian' 'phrygian' 'lydian' 'mixolydian' 'aeolian' 'locrian')) ('[data:makeList]' ('[data:makeList]' 0 2 4 5 7 9 11 12) ('[data:makeList]' 0 2 3 5 7 9 10 12) ('[data:makeList]' 0 1 3 5 7 8 10 12) ('[data:makeList]' 0 2 4 6 7 9 11 12) ('[data:makeList]' 0 2 4 5 7 9 10 12) ('[data:makeList]' 0 2 3 5 7 8 10 12) ('[data:makeList]' 0 1 3 5 6 8 10 12)))
}

to '_scales intervals' intervals root steps {
  local 'notes' ('[data:makeList]')
  for step steps {
    '[data:addLast]' ((at (((step - 1) % (size intervals)) + 1) intervals) + (root + (12 * ((step - 1) / (size intervals))))) notes
  }
  return notes
}

to '_scales pentatonic intervals for' which {
  return (at ('[data:find]' which ('[data:makeList]' 'major' 'minor')) ('[data:makeList]' ('[data:makeList]' 0 2 4 7 9 12) ('[data:makeList]' 0 3 5 7 10 12)))
}

to chord which root 'optional steps' {
  local 'steps' (v 'optional steps')
  if ((pushArgCount) < 3) {
    steps = 4
  }
  return ('_scales intervals' ('_scales chord intervals for' which) root steps)
}

to 'chord2 with roman numeral' degree root steps {
  local 'scale' ('_scales intervals' ('_scales diatonic intervals' 'ionian') root 7)
  local 'majors' ('[data:makeList]' 'I' 'II' 'III' 'IV' 'V' 'VI' 'VII')
  local 'minors' ('[data:makeList]' 'i' 'ii' 'iii' 'iv' 'v' 'vi' 'vii')
  local 'add 7th' (('[data:find]' '7' degree) > 0)
  local 'diminished' ((('[data:find]' 'o' degree) + ('[data:find]' 'º' degree)) > 0)
  local 'chord name' ''
  if (v 'add 7th') {
    degree = ('[data:copyFromTo]' degree 1 ((size degree) - 1))
  }
  if diminished {
    degree = ('[data:copyFromTo]' degree 1 ((size degree) - 1))
  }
  local 'index' ('[data:find]' degree majors)
  if (index > 0) {
    'chord name' = 'major'
  } else {
    index = ('[data:find]' degree minors)
    if (index > 0) {
      'chord name' = 'minor'
    }
  }
  if (v 'add 7th') {
    'chord name' = ('[data:join]' (v 'chord name') ' 7th')
  }
  if diminished {
    'chord name' = 'diminished'
  }
  return (chord (v 'chord name') (at index scale) steps)
}

to degrees degrees root {
  local 'degree list' degrees
  local 'chords' ('[data:makeList]')
  if (isType degrees 'string') {
    if (('[data:find]' ',' degrees) > 0) {
      'degree list' = ('[data:split]' degrees ',')
    } else {
      'degree list' = ('[data:makeList]' degrees)
    }
  }
  for degree (v 'degree list') {
    '[data:addLast]' ('chord2 with roman numeral' degree root 4) chords
  }
  return chords
}

to 'pentatonic scale' which root 'optional steps' {
  local 'steps' (v 'optional steps')
  if ((pushArgCount) < 3) {
    steps = 5
  }
  return ('_scales intervals' ('_scales pentatonic intervals for' which) root steps)
}

to scale which root 'optional steps' {
  local 'steps' (v 'optional steps')
  if ((pushArgCount) < 3) {
    steps = 5
  }
  return ('_scales intervals' ('_scales diatonic intervals' which) root steps)
}

