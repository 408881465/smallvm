module Rhythm Control
author MicroBlocks
version 1 0 
description 'Set a tempo in beats per minute (BPM) and get the length in milliseconds of the different relative music durations.
'
variables _rhy_tempo _rhy_looping _rhy_pattern _rhy_beat_duration _rhy_measures 

  spec ' ' 'set tempo to' 'set tempo to _ bpm' 'auto' 200
  spec ' ' 'set time signature to' 'set time signature to _ / _' 'auto auto' 4 4
  spec ' ' 'set up measures' 'set up _ bars pattern' 'auto' 16
  spec ' ' 'rhy broadcast' 'add _ at bar _ beat _' 'auto auto auto' 'kick' 1 1
  spec ' ' 'broadcast remove' 'remove _ from bar _ beat _' 'auto auto auto' 'kick' 1 1
  spec ' ' 'stop playing' 'stop playing'
  spec ' ' 'start playing' 'start playing'
  spec 'r' 'whole duration' '𝅝'
  spec 'r' 'half duration' '𝅗𝅥'
  spec 'r' 'quarter duration' '♩'
  spec 'r' 'eighth duration' '♪'
  spec 'r' 'sixteenth duration' '𝅘𝅥𝅯'
  spec 'r' 'dotted' '_ .' 'auto' ''
  spec 'r' 'triplet' '‿³ _' 'auto' ''
  spec ' ' '_rhythm loop' '_rhythm loop'
  spec 'r' '_rhy duration of note value' '_rhy duration of note value _' 'auto' 4
  spec 'r' '_rhy 2 ^' '_rhy 2 ^ _' 'auto' '10'
  spec ' ' 'read pattern from dump' 'read pattern from file _' 'auto' 'rock.pat'
  spec ' ' 'dump pattern to file' 'dump pattern to file _' 'auto' 'rock.pat'

to '_rhy 2 ^' n {
  local 'result' 1
  repeat n {
    result = (result * 2)
  }
  return result
}

to '_rhy duration of note value' 'note value' {
  for i (v 'note value') {
    if (('_rhy 2 ^' i) == (v 'note value')) {return (at i ('[data:makeList]' ('half duration') ('quarter duration') ('eighth duration') ('sixteenth duration')))}
  }
  return ('whole duration')
}

to '_rhythm loop' {
  repeatUntil (not _rhy_looping) {
    for bar _rhy_pattern {
      for beat bar {
        for trigger beat {
          sendBroadcast trigger
          waitMicros 50
        }
        waitMillis _rhy_beat_duration
      }
    }
  }
}

to 'broadcast remove' message 'bar number' 'beat number' {
  local 'beat' (at (v 'beat number') (at (v 'bar number') _rhy_pattern))
  local 'index' ('[data:find]' message beat)
  if (index > 0) {
    '[data:delete]' index beat
  }
}

to dotted duration {
  return (duration + (duration / 2))
}

to 'dump pattern to file' filename {
  '[file:delete]' filename
  '[file:open]' filename
  '[file:appendLine]' ('[data:join]' 't:' _rhy_tempo ',b:' _rhy_beat_duration ',m:' _rhy_measures) filename
  local 'dump' ''
  for bar _rhy_pattern {
    for beat bar {
      for trigger beat {
        dump = ('[data:join]' dump trigger ',')
      }
      dump = ('[data:copyFromTo]' dump 1 ((size dump) - 1))
      dump = ('[data:join]' dump '#')
    }
    dump = ('[data:copyFromTo]' dump 1 ((size dump) - 1))
    dump = ('[data:join]' dump '|')
  }
  '[file:appendLine]' ('[data:copyFromTo]' dump 1 ((size dump) - 1)) filename
  '[file:close]' filename
}

to 'eighth duration' {
  return (30000 / _rhy_tempo)
}

to 'half duration' {
  return (120000 / _rhy_tempo)
}

to 'quarter duration' {
  return (60000 / _rhy_tempo)
}

to 'read pattern from dump' filename {
  '[file:open]' filename
  local 'header' ('[data:split]' ('[file:readLine]' filename) ',')
  _rhy_measures = (at 2 ('[data:split]' (at 3 header) ':'))
  _rhy_beat_duration = (at 2 ('[data:split]' (at 2 header) ':'))
  _rhy_tempo = (at 2 ('[data:split]' (at 1 header) ':'))
  _rhy_pattern = ('[data:makeList]')
  for 'bar string' ('[data:split]' ('[file:readLine]' filename) '|') {
    local 'bar' ('[data:makeList]')
    for 'beat string' ('[data:split]' (v 'bar string') '#') {
      '[data:addLast]' ('[data:split]' (v 'beat string') ',') bar
    }
    '[data:addLast]' bar _rhy_pattern
  }
  '[file:close]' filename
}

to 'rhy broadcast' message 'bar number' 'beat number' {
  local 'beat' (at (v 'beat number') (at (v 'bar number') _rhy_pattern))
  if (('[data:find]' message beat) < 0) {
    '[data:addLast]' message beat
  }
}

to 'set tempo to' tempo {
  _rhy_tempo = tempo
  if (_rhy_beat_note_value == 0) {
    'set time signature to' 4 4
  }
}

to 'set time signature to' measures 'note value' {
  if (_rhy_tempo == 0) {'set tempo to' 200}
  _rhy_beat_duration = ('_rhy duration of note value' (v 'note value'))
  _rhy_beat_note_value = (v 'note value')
  _rhy_measures = measures
}

to 'set up measures' n {
  _rhy_pattern = ('[data:makeList]')
  for i n {
    '[data:addLast]' ('[data:makeList]') _rhy_pattern
    repeat _rhy_measures {
      '[data:addLast]' ('[data:makeList]') (at i _rhy_pattern)
    }
  }
}

to 'sixteenth duration' {
  return (15000 / _rhy_tempo)
}

to 'start playing' {
  _rhy_looping = (booleanConstant true)
  sendBroadcast '_rhythm loop'
}

to 'stop playing' {
  _rhy_looping = (booleanConstant false)
}

to triplet duration {
  return ((duration * 2) / 3)
}

to 'whole duration' {
  return (240000 / _rhy_tempo)
}

