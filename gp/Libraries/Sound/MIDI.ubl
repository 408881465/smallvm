module MIDI Output
author MicroBlocks
version 1 0 
description 'Play notes through hardware MIDI. By default, it plays through the hardware serial port, which may interfere with the MicroBlocks IDE when programming it live unless you''re using a board with an extra hardware serial port, such as the Due. You can, however, specify a software serial port using the `set MIDI pin` block.

Connect the MIDI pin 5 to the serial pin, MIDI pin 2 to GND through a 220Ω resistor, and MIDI pin 4 to 5v, also through a 220Ω resistor.
'
variables _MIDI_initialized _MIDI_pin _MIDI_soft_baudrate _MIDI_channel 

  spec ' ' 'play MIDI note' 'send MIDI note _ during _ ms on channel _' 'auto auto auto' 60 500 1
  spec 'r' 'note to MIDI' 'note _ octave _ to MIDI key' 'auto auto' 'c' 0
  spec ' ' 'set MIDI pin' 'set MIDI signal to pin _' 'auto' 8
  spec ' ' '_MIDI init' '_MIDI init'
  spec 'r' '_MIDI message' '_MIDI message type _ channel _ data _' 'num auto auto' 9 6 ''
  spec 'r' '_MIDI note on' '_MIDI note on'
  spec 'r' '_MIDI note off' '_MIDI note off'
  spec ' ' '_send MIDI message' '_send MIDI message _' 'auto' ''
  spec ' ' 'send MIDI reset' 'send MIDI reset'
  spec ' ' 'send MIDI start playing' 'send MIDI start playing'
  spec ' ' 'send MIDI stop playing' 'send MIDI stop playing'
  spec ' ' 'send MIDI continue playing' 'send MIDI continue playing'
  spec ' ' 'send note' 'send MIDI note _ on _ on channel _' 'auto bool auto' 60 true 1
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'
  spec 'r' '_MIDI program change' '_MIDI program change'
  spec ' ' 'select MIDI instrument' 'select MIDI instrument _ for channel _' 'auto auto' '10' 2

to '_MIDI init' {
  if (not _MIDI_initialized) {
    if (_MIDI_pin == 0) {
      '[serial:open]' 31250
    } else {
      '[serial:close]'
      _MIDI_soft_baudrate = 31350
    }
    _MIDI_initialized = (booleanConstant true)
  }
}

to '_MIDI message' type channel data {
  return ('[data:asByteArray]' ('[data:join]' ('[data:makeList]' ((type << 4) | (channel - 1))) data))
}

to '_MIDI note off' {
  return 8
}

to '_MIDI note on' {
  return 9
}

to '_MIDI program change' {
  return 12
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'note to MIDI' note octave {
  return ((at ('[data:find]' ('_trimmedLowercase' note) ('[data:makeList]' 'c' 'c#' 'd' 'd#' 'e' 'f' 'f#' 'g' 'g#' 'a' 'a#' 'b' 'c_' 'db' 'd_' 'eb' 'e_' 'e#' 'f_' 'gb' 'g_' 'ab' 'a_' 'bb' 'b_' 'b#')) ('[data:makeList]' 60 61 62 63 64 65 66 67 68 69 70 71 59 61 61 63 63 65 64 66 66 68 68 70 70 72)) + (octave * 12))
}

to 'play MIDI note' 'midi note' duration channel {
  'send note' (v 'midi note') true channel
  waitMillis duration
  'send note' (v 'midi note') false channel
}

to 'select MIDI instrument' 'instrument number' channel {
  '_send MIDI message' ('_MIDI message' ('_MIDI program change') channel ('[data:makeList]' (v 'instrument number')))
}

to 'send MIDI continue playing' {
  '_send MIDI message' ('[data:asByteArray]' ('[data:makeList]' (hexToInt 'FB')))
}

to '_send MIDI message' message {
  '_MIDI init'
  if (_MIDI_pin == 0) {
    '[serial:write]' message
  } else {
    for byte message {
      '[io:softWriteByte]' byte _MIDI_pin _MIDI_soft_baudrate
    }
  }
}

to 'send MIDI reset' {
  '_send MIDI message' (hexToInt 'FF')
  '_send MIDI message' ('[data:makeList]' (hexToInt 'F0') (hexToInt '7E') (hexToInt '7F') (hexToInt '09') (hexToInt '01') (hexToInt 'F7'))
}

to 'send MIDI start playing' {
  '_send MIDI message' ('[data:asByteArray]' ('[data:makeList]' (hexToInt 'FA')))
}

to 'send MIDI stop playing' {
  '_send MIDI message' ('[data:asByteArray]' ('[data:makeList]' (hexToInt 'FC')))
}

to 'send note' 'midi note' on/off channel {
  if (isType (v 'midi note') 'list') {
    for note (v 'midi note') {
      'send note' note on/off channel
    }
  } else {
    if on/off {
      '_send MIDI message' ('_MIDI message' ('_MIDI note on') channel ('[data:makeList]' (v 'midi note') 127))
    } else {
      '_send MIDI message' ('_MIDI message' ('_MIDI note off') channel ('[data:makeList]' (v 'midi note') 0))
    }
  }
}

to 'set MIDI pin' pin {
  '[serial:close]'
  _MIDI_pin = pin
  _MIDI_initialized = (booleanConstant false)
  '_MIDI init'
}

