module MIDI Output
author MicroBlocks
version 1 2 
choices druminst 'Acoustic Bass Drum' 'Bass Drum 1' 'Side Stick' 'Acoustic Snare' 'Hand Clap' 'Electric Snare' 'Low Floor Tom' 'Closed Hi-Hat' 'High Floor Tom' 'Pedal Hi-Hat' 'Low Tom' 'Open Hi-Hat' 'Low-Mid Tom' 'Hi-Mid Tom' 'Crash Cymbal 1' 'High Tom' 'Ride Cymbal 1' 'Chinese Cymbal' 'Ride Bell' Tambourine 'Splash Cymbal' Cowbell 'Crash Cymbal 2' Vibraslap 'Ride Cymbal 2' 'Hi Bongo' 'Low Bongo' 'Mute Hi Conga' 'Open Hi Conga' 'Low Conga' 'High Timbale' 'Low Timbale' 'High Agogo' 'Low Agogo' Cabasa Maracas 'Short Whistle' 'Long Whistle' 'Short Guiro' 'Long Guiro' Claves 'Hi Wood Block' 'Low Wood Block' 'Mute Cuica' 'Open Cuica' 'Mute Triangle' 'Open Triangle' 
choices instrument piano 'chromatic percussion' organ guitar bass strings ensemble brass reed pipe 'synth lead' 'synth pad' 'synth SFX' ethnic percussive SFX 
choices controls 'bank select 1' 'bank select 2' modulation 'portamento time' volume pan expression hold portamento sostenuto soft resonance 'release time' 'attack time' cutoff 'decay time' 'vibrato rate' 'vibrato depth' 'vibrato delay' 'portamento control' 'effect 1' 'effect 2' 
description 'Control MIDI devices. By default, it interfaces the hardware serial port, but it also supports software serial and USB MIDI.

Software Serial Ports
---------------------
You can specify a software serial port using the `set MIDI pin` block. On most boards, however, the default serial pin is going to be pin 1, so there is no need to use the `set MIDI pin` block. Connect MIDI pin 5 to the serial pin, and MIDI pin 4 to 3.3v or 5v.

USB MIDI
--------
Alternatively, if you want to use the MIDI library to control a USB MIDI device -or a virtual synth running in your PC, even while MicroBlocks is running- you can do so by setting the `use USB MIDI` flag to true in the `set MIDI pin` block.
'
variables _MIDI_initialized _MIDI_pin _MIDI_soft_baudrate _MIDI_channel 

  spec ' ' 'play MIDI note' 'play MIDI note _ for _ ms on channel _ volume _' 'auto auto auto auto' 60 500 1 127
  spec ' ' 'send note' 'set MIDI note _ to _ on channel _ volume _' 'auto bool auto auto' 60 true 1 127
  space
  spec ' ' 'arpeggiate' 'arpeggiate _ in order _ and duration _ on channel _' 'auto auto auto auto' 'aListOfNotes' 'aListOfPositions' 'aDurationOrListOfDurations' '1'
  space
  spec 'r' 'note to MIDI' 'note _ octave _ to MIDI key' 'auto auto' 'c' 0
  space
  spec ' ' 'select MIDI instrument' 'select MIDI instrument _ for channel _' 'auto auto' '10' 2
  spec 'r' 'instrument' 'instrument _ number _' 'menu.instrument menu.range:1-8' 'piano' 1
  spec 'r' 'drum note' 'drum note _' 'menu.druminst' 'Ride Cymbal 2'
  space
  spec ' ' 'change MIDI control' 'change MIDI control _ on channel _ to _' 'menu.controls auto auto' 'modulation' 1 127
  spec ' ' 'pitch bend channel' 'pitch bend MIDI channel _ to _ %' 'auto auto' 1 -50
  space
  spec ' ' 'send MIDI reset' 'send MIDI reset'
  space
  spec ' ' 'send MIDI start playing' 'send MIDI start playing'
  spec ' ' 'send MIDI stop playing' 'send MIDI stop playing'
  spec ' ' 'send MIDI continue playing' 'send MIDI continue playing'
  space
  spec ' ' 'set MIDI pin' 'set MIDI signal to pin _ : use USB MIDI _' 'auto bool' 8 false
  space
  spec ' ' '_MIDI init' '_MIDI init'
  spec 'r' '_MIDI message' '_MIDI message type _ channel _ data _' 'num auto auto' 9 6 ''
  spec 'r' '_MIDI note on' '_MIDI note on'
  spec 'r' '_MIDI note off' '_MIDI note off'
  spec 'r' '_MIDI program change' '_MIDI program change'
  spec 'r' '_MIDI pitch bend' '_MIDI pitch bend'
  spec 'r' '_MIDI control change' '_MIDI control change'
  spec 'r' '_MIDI drum notes 1' '_MIDI drum notes 1'
  spec 'r' '_MIDI drum notes 2' '_MIDI drum notes 2'
  spec ' ' '_MIDI send message' '_MIDI send message _' 'auto' ''
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'

to '_MIDI control change' {
  return (hexToInt 'B')
}

to '_MIDI drum notes 1' {
  return ('[data:makeList]' 'Acoustic Bass Drum' 'Bass Drum 1' 'Side Stick' 'Acoustic Snare' 'Hand Clap' 'Electric Snare' 'Low Floor Tom' 'Closed Hi-Hat' 'High Floor Tom' 'Pedal Hi-Hat' 'Low Tom' 'Open Hi-Hat' 'Low-Mid Tom' 'Hi-Mid Tom' 'Crash Cymbal 1' 'High Tom' 'Ride Cymbal 1' 'Chinese Cymbal' 'Ride Bell' 'Tambourine' 'Splash Cymbal' 'Cowbell')
}

to '_MIDI drum notes 2' {
  return ('[data:makeList]' 'Crash Cymbal 2' 'Vibraslap' 'Ride Cymbal 2' 'Hi Bongo' 'Low Bongo' 'Mute Hi Conga' 'Open Hi Conga' 'Low Conga' 'High Timbale' 'Low Timbale' 'High Agogo' 'Low Agogo' 'Cabasa' 'Maracas' 'Short Whistle' 'Long Whistle' 'Short Guiro' 'Long Guiro' 'Claves' 'Hi Wood Block' 'Low Wood Block' 'Mute Cuica' 'Open Cuica' 'Mute Triangle' 'Open Triangle')
}

to '_MIDI init' {
  if (not _MIDI_initialized) {
    if (_MIDI_pin == 0) {
      '[serial:open]' 31250
    } else {
      '[serial:close]'
      _MIDI_soft_baudrate = 31350
    }
    _MIDI_initialized = (booleanConstant true)
  }
}

to '_MIDI message' type channel data {
  return ('[data:join]' ('[data:makeList]' ((type << 4) | (channel - 1))) data)
}

to '_MIDI note off' {
  return 8
}

to '_MIDI note on' {
  return 9
}

to '_MIDI pitch bend' {
  return (hexToInt 'E')
}

to '_MIDI program change' {
  return 12
}

to '_MIDI send message' message {
  '_MIDI init'
  if (_MIDI_pin == 0) {
    '[serial:write]' message
  } (_MIDI_pin == 'USB') {
    callCustomCommand '[serial:midiSend]' message
  } else {
    for byte message {
      '[io:softWriteByte]' byte _MIDI_pin _MIDI_soft_baudrate
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to arpeggiate 'note list' order duration channel {
  for i (size order) {
    local 'start' (millisOp)
    if (isType duration 'list') {
      local 'dur' (at i duration)
    } else {
      local 'dur' duration
    }
    'play MIDI note' (at (at i order) (v 'note list')) (dur - ((millisOp) - start)) channel 127
  }
}

to 'change MIDI control' control channel value {
  '_MIDI send message' ('_MIDI message' ('_MIDI control change') channel ('[data:makeList]' (at ('[data:find]' control ('[data:makeList]' 'bank select 1' 'bank select 2' 'modulation' 'portamento time' 'volume' 'pan' 'expression' 'hold' 'portamento' 'sostenuto' 'soft' 'resonance' 'release time' 'attack time' 'cutoff' 'decay time' 'vibrato rate' 'vibrato depth' 'vibrato delay' 'portamento control' 'effect 1' 'effect 2')) ('[data:makeList]' 0 32 1 5 7 10 11 64 65 66 67 71 72 73 74 75 76 77 78 84 91 93)) value))
}

to 'drum note' instrument {
  return (('[data:find]' instrument ('[data:join]' ('_MIDI drum notes 1') ('_MIDI drum notes 2'))) + 34)
}

to instrument instrument number {
  return (((('[data:find]' instrument ('[data:makeList]' 'piano' 'chromatic percussion' 'organ' 'guitar' 'bass' 'strings' 'ensemble' 'brass' 'reed' 'pipe' 'synth lead' 'synth pad' 'synth SFX' 'ethnic' 'percussive' 'SFX')) - 1) * 8) + number)
}

to 'note to MIDI' note octave {
  return ((at ('[data:find]' ('_trimmedLowercase' note) ('[data:makeList]' 'c' 'c#' 'd' 'd#' 'e' 'f' 'f#' 'g' 'g#' 'a' 'a#' 'b' 'c_' 'db' 'd_' 'eb' 'e_' 'e#' 'f_' 'gb' 'g_' 'ab' 'a_' 'bb' 'b_' 'b#')) ('[data:makeList]' 60 61 62 63 64 65 66 67 68 69 70 71 59 61 61 63 63 65 64 66 66 68 68 70 70 72)) + (octave * 12))
}

to 'pitch bend channel' channel percent {
  '_MIDI send message' ('_MIDI message' ('_MIDI pitch bend') channel ('[data:makeList]' 0 (minimum 127 (((64 * percent) / 100) + 64))))
}

to 'play MIDI note' 'midi note' duration channel volume {
  'send note' (v 'midi note') true channel volume
  waitMillis (duration - 3)
  'send note' (v 'midi note') false channel 0
}

to 'select MIDI instrument' 'instrument number' channel {
  '_MIDI send message' ('_MIDI message' ('_MIDI program change') channel ('[data:makeList]' ((v 'instrument number') - 1)))
}

to 'send MIDI continue playing' {
  '_MIDI send message' ('[data:makeList]' (hexToInt 'FB'))
}

to 'send MIDI reset' {
  '_MIDI send message' (hexToInt 'FF')
  '_MIDI send message' ('[data:makeList]' (hexToInt 'F0') (hexToInt '7E') (hexToInt '7F') (hexToInt '09') (hexToInt '01') (hexToInt 'F7'))
}

to 'send MIDI start playing' {
  '_MIDI send message' ('[data:makeList]' (hexToInt 'FA'))
}

to 'send MIDI stop playing' {
  '_MIDI send message' ('[data:makeList]' (hexToInt 'FC'))
}

to 'send note' 'midi note' on/off channel volume {
  if (isType (v 'midi note') 'list') {
    for note (v 'midi note') {
      'send note' note on/off channel volume
    }
  } else {
    if on/off {
      '_MIDI send message' ('_MIDI message' ('_MIDI note on') channel ('[data:makeList]' (v 'midi note') volume))
    } else {
      '_MIDI send message' ('_MIDI message' ('_MIDI note off') channel ('[data:makeList]' (v 'midi note') 0))
    }
  }
}

to 'set MIDI pin' pin USB {
  '[serial:close]'
  if USB {
    _MIDI_pin = 'USB'
  } else {
    _MIDI_pin = pin
  }
  _MIDI_initialized = (booleanConstant false)
  '_MIDI init'
}

