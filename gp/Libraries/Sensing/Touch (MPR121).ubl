module 'Touch (MPR121)' Input
author MicroBlocks
version 1 2 
description 'Support for the MPR121 12-channel i2c touch sensor.'
variables _touch_initialized _touch_state _touch_last_state 

  spec 'r' 'touch_isTouched' 'is pin _ touched?' 'menu.range:0-11' 0
  spec 'r' 'touch_any_pin_touched' 'is any pin touched?'
  space
  spec 'r' 'touch_touch_event' 'touch event'
  spec 'r' 'touch_last_touched_pin' 'last touched pin'
  space
  spec 'r' 'touch_state_string' 'touch state string'
  space
  spec ' ' '_touch_init' '_touch_init'
  spec ' ' '_touch_update' '_touch_update'
  spec ' ' '_touch_setRegister' '_touch_setRegister _ to _' 'auto auto' 'hex register' 'hex value'

to '_touch_init' {
  comment 'Soft reset -- sets all registers to defaults'
  '_touch_setRegister' '0x80' '0x63'
  comment 'Set filter parameters'
  '_touch_setRegister' '0x2B' '0x01'
  '_touch_setRegister' '0x2C' '0x01'
  '_touch_setRegister' '0x2D' '0x10'
  '_touch_setRegister' '0x2E' '0x20'
  '_touch_setRegister' '0x2F' '0x01'
  '_touch_setRegister' '0x30' '0x01'
  '_touch_setRegister' '0x31' '0x10'
  '_touch_setRegister' '0x32' '0x20'
  '_touch_setRegister' '0x33' '0x01'
  '_touch_setRegister' '0x34' '0x10'
  '_touch_setRegister' '0x35' '0xFF'
  comment 'Init debounce and config registers'
  '_touch_setRegister' '0x5B' '0x11'
  '_touch_setRegister' '0x5C' '0xFF'
  '_touch_setRegister' '0x5D' '0x30'
  comment 'Set touch/release thresholds'
  local 'touchThreshold' 40
  local 'releaseThreshold' 20
  for i 12 {
    local 'reg' ((hexToInt '40') + (2 * i))
    i2cSet 90 (reg - 1) touchThreshold
    i2cSet 90 reg releaseThreshold
  }
  comment 'Start tracking all 12 inputs (proximity detection disabled)'
  '_touch_setRegister' '0x5E' '0xCC'
  _touch_initialized = (booleanConstant true)
}

to '_touch_setRegister' reg value {
  i2cSet 90 (hexToInt reg) (hexToInt value)
}

to '_touch_update' {
  if (not _touch_initialized) {'_touch_init'}
  _touch_state = (((i2cGet 90 1) << 8) | (i2cGet 90 0))
}

to touch_any_pin_touched {
  '_touch_update'
  return (_touch_state != 0)
}

to touch_isTouched pin {
  if (or (pin < 0) (pin > 11)) {return (booleanConstant false)}
  '_touch_update'
  return ((_touch_state & (1 << (11 - pin))) != 0)
}

to touch_last_touched_pin {
  comment 'If a pin was just touched, return the index of that pin,
otherwise, return zero.'
  for i 12 {
    local 'previous' (_touch_last_state & (1 << (12 - i)))
    local 'current' (_touch_state & (1 << (12 - i)))
    if (and (previous == 0) (current != 0)) {
      comment 'Return index of newly touched pin '
      return (i - 1)
    }
  }
  return -1
}

to touch_state_string {
  '_touch_update'
  local 'pin states' ('[data:makeList]')
  for i 12 {
    if ((_touch_state & (1 << (12 - i))) != 0) {
      '[data:addLast]' '1' (v 'pin states')
    } else {
      '[data:addLast]' '0' (v 'pin states')
    }
  }
  return ('[data:joinStrings]' (v 'pin states'))
}

to touch_touch_event {
  _touch_last_state = _touch_state
  '_touch_update'
  return ((touch_last_touched_pin) >= 0)
}

