module Cutebot Output
author wwj718
version 1 2 
depends Distance NeoPixel 
choices cutebot_side left right 
choices cutebot_light left right both 
description 'Cutebot is a rear-drive smart car driven by dual high speed motors.

It features two RGB headlights, left and right line-following sensors, an ultrasonic distance sensor, and two downward-facing NeoPixels.

Add the IR Remote library to use the IR receiver (pin 16).

The Cutebot can work with the AILens library.

https://www.elecfreaks.com/learn-en/microbitKit/smart_cutebot/cutebot_car.html'

	spec ' ' 'cutebot_setWheelSpeed' 'Cutebot set wheel left _ right _ (-100 to 100)' 'num num' 100 -100
	spec ' ' 'cutebot_stopWheels' 'Cutebot stop wheels'
	spec ' ' 'cutebot_setServo' 'Cutebot set servo _ to _ (-100 to 100)' 'menu.range:1-2 num' 1 0
	space
	spec ' ' 'cutebot_setHeadlightColor' 'Cutebot set headlight _ to _' 'menu.cutebot_light color' 'both'
	spec ' ' 'cutebot_setNeopixels' 'Cutebot set NeoPixel _ to _' 'menu.cutebot_light color' 'both'
	space
	spec 'r' 'cutebot_lineSensor' 'Cutebot _ line sensor' 'menu.cutebot_side' 'left'
	spec 'r' 'cutebot_seesLine' 'Cutebot sees line on left _ right _' 'bool bool' true true
	spec 'r' 'cutebot_distance' 'Cutebot distance (cm)'
	spec 'r' '_rescale' '_rescale _ from range ( _ , _ ) to ( _ , _ )' 'num num num num num' 0 0 0 0 0

to '_cutebot_ADDR' {
  return 16
}

to '_rescale' val in_min in_max out_min out_max {
  return (((val - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min))
}

to cutebot_distance {
  local 'trigger_pin' 8
  local 'echo_pin' 12
  return ('distance (cm)' trigger_pin echo_pin)
}

to cutebot_lineSensor side {
  comment 'Return true if a black line is detected on the given side.'
  local 'left_pin' 13
  local 'right_pin' 14
  if (side == 'left') {
    return (not (digitalReadOp left_pin))
  } else {
    return (not (digitalReadOp right_pin))
  }
}

to cutebot_seesLine leftSide rightSide {
  return (and (leftSide == (cutebot_lineSensor 'left')) (rightSide == (cutebot_lineSensor 'right')))
}

to cutebot_setHeadlightColor which color {
  local 'r' ((color >> 16) & 255)
  local 'g' ((color >> 8) & 255)
  local 'b' ((color >> b) & 255)
  local 'left_LED' 4
  local 'right_LED' 8
  if (which == 'left') {
    '[sensors:i2cWrite]' ('_cutebot_ADDR') ('[data:makeList]' left_LED r g b)
  } (which == 'right') {
    '[sensors:i2cWrite]' ('_cutebot_ADDR') ('[data:makeList]' right_LED r g b)
  } else {
    '[sensors:i2cWrite]' ('_cutebot_ADDR') ('[data:makeList]' left_LED r g b)
    '[sensors:i2cWrite]' ('_cutebot_ADDR') ('[data:makeList]' right_LED r g b)
  }
}

to cutebot_setNeopixels which_NeoPixel color {
  if (0 == _np_pixels) {neoPixelAttach 2 15}
  if (which_NeoPixel == 'left') {
    atPut 1 _np_pixels color
  } (which_NeoPixel == 'right') {
    atPut 2 _np_pixels color
  } else {
    atPut 1 _np_pixels color
    atPut 2 _np_pixels color
  }
  '_NeoPixel_update'
}

to cutebot_setServo servo value {
  comment 'servo (number) is one of: 1 2
value range of -100 to 100 maps to the full range of the servo'
  servo = (maximum 1 (minimum servo 2))
  value = (maximum -100 (minimum value 100))
  '[sensors:i2cWrite]' ('_cutebot_ADDR') ('[data:asByteArray]' ('[data:makeList]' (servo + 4) ('_rescale' value 100 -100 0 180) 0 0))
}

to cutebot_setWheelSpeed left_wheel_speed right_wheel_speed {
  comment 'speed (number): -100-100
direction: 1 = backward, 2 = forward'
  local 'left_direction' 2
  local 'right_direction' 2
  if (left_wheel_speed < 0) {
    left_direction = 1
    left_wheel_speed = (0 - left_wheel_speed)
  }
  if (right_wheel_speed < 0) {
    right_direction = 1
    right_wheel_speed = (0 - right_wheel_speed)
  }
  left_wheel_speed = (minimum left_wheel_speed 100)
  right_wheel_speed = (minimum right_wheel_speed 100)
  '[sensors:i2cWrite]' ('_cutebot_ADDR') ('[data:asByteArray]' ('[data:makeList]' 1 left_direction left_wheel_speed 0))
  '[sensors:i2cWrite]' ('_cutebot_ADDR') ('[data:asByteArray]' ('[data:makeList]' 2 right_direction right_wheel_speed 0))
}

to cutebot_stopWheels {
  cutebot_setWheelSpeed 0 0
}

