module 'Zio Four Motor Controller' Output
author MicroBlocks
version 1 0
choices _zio4motor_motorMenu A B C D
description 'Support for Zio four DC motor (or 2 stepper motor) controller.
  https://www.smart-prototyping.com/Zio-4-DC-Motor-Controller.html
'
variables _zio4motor_addr

  spec ' ' 'zio4motor_init' 'zio4motor init i2c addr _' 'num' 64
  spec ' ' 'zio4motor_setMotor' 'zio4motor motor _ power _ (-100 to 100)' 'menu._zio4motor_motorMenu auto' 'A' '10'
  spec ' ' 'zio4motor_stopAllMotors' 'zio4motor stop all motors'
  space
  spec ' ' 'zio4motor_brakeMotor' 'zio4motor brake motor _' 'menu._zio4motor_motorMenu' 'A'
  space
  spec ' ' '_zio4motor_setDigital' '_zio4motor set pin _ to _' 'num bool' 0 true
  spec ' ' '_zio4motor_setPWM' '_zio4motor set PWM pin _ to _ (0-4095)' 'num num' 0 2000

to '_zio4motor_setDigital' pin on {
  if on {
    '_zio4motor_setPWM' pin 4095
  } else {
    '_zio4motor_setPWM' pin 0
  }
}

to '_zio4motor_setPWM' pin value {
  if (or (pin < 0) (pin > 15)) {return 0}
  value = (maximum 0 (minimum value 4095))
  if (value == 0) {
    comment 'Full off'
    local 'on' 0
    local 'off' 4096
  } (value == 4095) {
    comment 'Full on'
    local 'on' 4096
    local 'off' 0
  } else {
    comment 'Intermediate - use PWM'
    local 'on' 0
    local 'off' value
  }
  local 'reg' ((4 * pin) + 6)
  '[sensors:i2cWrite]' _zio4motor_addr ('[data:makeList]' reg (on & 255) (on >> 8) (off & 255) (off >> 8))
}

to 'zio4motor_brakeMotor' motor {
  if ('A' == motor) {
    '_zio4motor_setPWM' 0 0
    '_zio4motor_setDigital' 1 true
    '_zio4motor_setDigital' 2 true
  } ('B' == motor) {
    '_zio4motor_setPWM' 6 0
    '_zio4motor_setDigital' 4 true
    '_zio4motor_setDigital' 5 true
  } ('C' == motor) {
    '_zio4motor_setPWM' 7 0
    '_zio4motor_setDigital' 8 true
    '_zio4motor_setDigital' 9 true
  } ('D' == motor) {
    '_zio4motor_setPWM' 13 0
    '_zio4motor_setDigital' 11 true
    '_zio4motor_setDigital' 12 true
  }
}

to 'zio4motor_init' addr {
  _zio4motor_addr = addr
  comment 'Turn off all channels'
  i2cSet _zio4motor_addr (hexToInt 'FD') 16
  comment 'Go to sleep before setting prescale'
  i2cSet _zio4motor_addr (hexToInt '0') 17
  comment 'Set prescaler for 100Hz update rate (25000000 / (100 * 4096)) - 1'
  i2cSet _zio4motor_addr (hexToInt 'FE') 61
  comment 'Wake up + auto-increment'
  i2cSet _zio4motor_addr (hexToInt '0') 33
  comment 'Enable motor outputs'
  '_zio4motor_setDigital' 3 true
  '_zio4motor_setDigital' 10 true
}

to 'zio4motor_setMotor' motor power {
  local 'pwm' ('[misc:rescale]' (absoluteValue power) 0 100 0 4095)
  local 'dir' (power >= 0)
  if ('A' == motor) {
    '_zio4motor_setDigital' 1 dir
    '_zio4motor_setDigital' 2 (not dir)
    '_zio4motor_setPWM' 0 pwm
  } ('B' == motor) {
    '_zio4motor_setDigital' 4 dir
    '_zio4motor_setDigital' 5 (not dir)
    '_zio4motor_setPWM' 6 pwm
  } ('C' == motor) {
    '_zio4motor_setDigital' 8 dir
    '_zio4motor_setDigital' 9 (not dir)
    '_zio4motor_setPWM' 7 pwm
  } ('D' == motor) {
    '_zio4motor_setDigital' 11 dir
    '_zio4motor_setDigital' 12 (not dir)
    '_zio4motor_setPWM' 13 pwm
  }
}

to 'zio4motor_stopAllMotors' {
  'zio4motor_setMotor' 'A' 0
  'zio4motor_setMotor' 'B' 0
  'zio4motor_setMotor' 'C' 0
  'zio4motor_setMotor' 'D' 0
}

