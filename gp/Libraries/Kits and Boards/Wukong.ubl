module Wukong Output
author wwj718
version 1 2
depends NeoPixel
description 'Wukong is a compact micro:bit breakout board with servo and motor drivers, eight I/O pins, four NeoPixels, and four blue LEDs.

The built-in 400mAh Li-ion battery provides over than 40 minutes of power and can be fully recharged in just 20 minutes.

The base board design is compatible with Lego.

https://www.elecfreaks.com/learn-en/microbitExtensionModule/wukong.html
'

	spec ' ' 'wukong_setServo' 'Wukong set servo _ to _ (-100 to 100)' 'menu.range:0-7 num' 0 0
	space
	spec ' ' 'wukong_setMotor' 'Wukong set motor _ to _ (-100 to 100)' 'menu.range:1-2 num' 1 50
	spec ' ' 'wukong_stopAllMotors' 'Wukong stop all motors'
	space
	spec ' ' 'wukong_setNeopixels' 'Wukong set NeoPixels _ _ _ _' 'color color color color'
	spec ' ' 'wukong_setLEDBrightness' 'Wukong set LED brightness to _' 'num' 100
	space
	spec 'r' '_rescale' '_rescale _ from range ( _ , _ ) to ( _ , _ )' 'num num num num num' 0 0 0 0 0

to '_rescale' val in_min in_max out_min out_max {
  return ((((val - in_min) * (out_max - out_min)) / (in_max - in_min) ) + out_min)
}

to '_wukong_ADDR' {
  return 16
}

to wukong_setLEDBrightness num {
  num = (maximum 0 (minimum num 100))
  '[sensors:i2cWrite]' ('_wukong_ADDR') ('[data:makeList]' (hexToInt '12') num 0 0)
  '[sensors:i2cWrite]' ('_wukong_ADDR') ('[data:makeList]' (hexToInt '11') 160 0 0)
}

to wukong_setMotor motor power {
  comment 'motor (number): 1 or 2'
  comment 'power (number): -100 to 100'
  if (or (motor < 1) (motor > 2)) {
    motor = 1
  }
  power = (maximum -100 (minimum power 100))
  if (power < 0) {
    '[sensors:i2cWrite]' ('_wukong_ADDR') ('[data:makeList]' motor 2 (0 - power) 0)
  } else {
    '[sensors:i2cWrite]' ('_wukong_ADDR') ('[data:makeList]' motor 1 power 0)
  }
}

to wukong_setNeopixels c1 c2 c3 c4 {
  neoPixelAttach 4 16
  setNeoPixelColors10 c1 c2 c3 c4
}

to wukong_setServo servo value {
  comment 'servo (number) is 0-7
value range of -100 to 100 maps to the full range of the servo'
  servo = (maximum 0 (minimum servo 7))
  channel = (servo + 3)
  if (servo == 7) {
    comment 'servo 7 is controlled by channel 16'
    channel = 16
  }
  value = (maximum -100 (minimum value 100))
  '[sensors:i2cWrite]' ('_wukong_ADDR') ('[data:makeList]' channel ('_rescale' value 100 -100 0 180) 0 0)
}

to wukong_stopAllMotors {
  wukong_setMotor 1 0
  wukong_setMotor 2 0
}

