module BMP Output
author 'José García Yeste'
version 1 6 
depends TFT 
description 'Display BMP files on a TFT screen.

BMP files can be transferred to and from boards with a file systems using the put/get commands in the IDE. (Those commands are only available in "show advanced blocks" mode.)

This library works with 16, 24 and 32 bpp BMP files,
'

  spec ' ' 'drawBMPfile' 'display BMP file _ at x _ y _' 'auto auto auto' 'image.bmp' 0 0
  spec 'r' '_checkBMP' '_check BMP signature of file _' 'auto' ''
  spec ' ' '_drawBMP from' '_draw BMP of file _ width _ height _ bpp _ x _ y _' 'auto auto auto auto auto auto' '' 0 0 24 0 0
  spec 'r' '_readLineBMP' '_read BMPline of file _ width _ bpp _' 'auto auto auto' '' 0 24
  spec ' ' '_ignoreBMP' '_ignore _ bytes of file _' 'auto auto' 0 ''
  spec 'r' '_read int16 of BMP file' '_read int16 of file _' 'auto' ''
  spec 'r' '_read int32 of BMP file' '_read int32 of file _' 'auto' ''

to '_checkBMP' filename {
  local 'signature' ''
  local 'data' ('[file:readBytes]' 2 filename)
  for i (size data) {
    signature = ('[data:join]' signature ('[data:unicodeString]' (at i data)))
  }
  return (signature == 'BM')
}

to '_drawBMP from' filename width height bpp 'origin x' 'origin y' {
  local 'y' (height - 1)
  repeatUntil (y < 0) {
    local 'line' ('_readLineBMP' filename width bpp)
    for x (size line) {
      if (height < 0) {
        '[tft:setPixel]' ((x - 1) + (v 'origin x')) ((absoluteValue height) - (y + (v 'origin y'))) (at x line)
      } else {
        '[tft:setPixel]' ((x - 1) + (v 'origin x')) (y + (v 'origin y')) (at x line)
      }
    }
    y += -1
  }
}

to '_ignoreBMP' bytes filename {
  local 'buf' 0
  repeatUntil (bytes == 0) {
    if (bytes > 800) {
      buf = ('[file:readBytes]' 800 filename)
    } else {
      buf = ('[file:readBytes]' bytes filename)
    }
    bytes = (bytes - (size buf))
  }
}

to '_read int16 of BMP file' filename {
  local 'data' ('[file:readBytes]' 2 filename)
  return (((at 2 data) << 8) | (at 1 data))
}

to '_read int32 of BMP file' filename {
  local 'data' ('[file:readBytes]' 4 filename)
  return ((((at 4 data) << 24) | ((at 3 data) << 16)) | (((at 2 data) << 8) | (at 1 data)))
}

to '_readLineBMP' filename width bpp {
  local 'result' ('[data:makeList]')
  local 'i' (width * (bpp / 8))
  local 'data' ('[data:newByteArray]' 0)
  repeatUntil (i <= 0) {
    data = ('[data:join]' data ('[file:readBytes]' (minimum 768 i) filename))
    i += (0 - (minimum 768 i))
  }
  i = 1
  repeatUntil (i >= (size data)) {
    if (bpp == 16) {
      '[data:addLast]' (((((at (i + 1) data) & 124) << 17) | (((((at (i + 1) data) & 3) << 3) | ((at i data) >> 5)) << 11)) | (((at i data) & 31) << 3)) result
    } else {
      '[data:addLast]' ((((at (i + 2) data) << 16) | ((at (i + 1) data) << 8)) | (at i data)) result
    }
    i += (bpp / 8)
  }
  local 'mod4' ((size data) % 4)
  if (mod4 != 0) {
    '_ignoreBMP' (4 - mod4) filename
  }
  return result
}

to drawBMPfile filename 'origin x' 'origin y' {
  '[file:open]' filename
  if ('_checkBMP' filename) {
    '_ignoreBMP' 8 filename
    local 'start' ('_read int32 of BMP file' filename)
    '_ignoreBMP' 4 filename
    local 'width' ('_read int32 of BMP file' filename)
    local 'height' ('_read int32 of BMP file' filename)
    '_ignoreBMP' 2 filename
    local 'bpp' ('_read int16 of BMP file' filename)
    '_ignoreBMP' (start - 30) filename
    '_drawBMP from' filename width height bpp (v 'origin x') (v 'origin y')
  }
  '[file:close]' filename
}

