module BMP Output
author 'José García Yeste'
version 1 8 
depends TFT File
description 'Display BMP files on a TFT screen.

BMP files can be transferred to and from boards with a file systems using the put/get commands in the IDE. (Those commands are only available in "show advanced blocks" mode.)
Dragging a BMP file over microBlocks also loads them into the file system.

This library works with 1, 4, 8, 16, 24 and 32 bpp non compressed BMP files.

Tested with BMPs generated by GIMP.
'
variables '_bmp palette' '_bmp rgb565' 

  spec ' ' 'drawBMPfile' 'display BMP file _ at x _ y _' 'str num num' 'image.bmp' 0 0
  spec 'r' '_checkBMP' '_check BMP signature of file _' 'str' ''
  spec ' ' '_drawBMP from' '_draw BMP of file _ width _ height _ bpp _ x _ y _' 'str num num num num num' '' 0 0 24 0 0
  spec 'r' '_readLineBMP' '_read BMPline of file _ width _ bpp _' 'str num num' '' 0 24
  spec ' ' '_ignoreBMP' '_ignore _ bytes of file _' 'num str' 0 ''
  spec 'r' '_read int16 of BMP file' '_read int16 of file _' 'str' ''
  spec 'r' '_read int32 of BMP file' '_read int32 of file _' 'str' ''
  spec 'r' '_read palette entry of file' '_read palette entry of file _' 'str' ''
  spec ' ' 'read 1 byte pixels from' 'read 1 byte pixels from _ starting at _ bpp _ into _' 'str num num str' '' 1 1 ''
  spec 'r' '_read 2 bytes pixel from' '_read 2 bytes pixel from _ starting at _' 'str num' '' 1
  spec 'r' '_read 3 bytes pixel from' '_read 3 bytes pixel from _ starting at _' 'str num' '' 1

to '_checkBMP' filename {
  local 'signature' ''
  local 'data' ('[file:readBytes]' 2 filename)
  for i (size data) {
    signature = ('[data:join]' signature ('[data:unicodeString]' (at i data)))
  }
  return (signature == 'BM')
}

to '_drawBMP from' filename width height bpp 'origin x' 'origin y' {
  if (height >= 0) {
    local 'y' (((v 'origin y') + height) - 1)
  } else {
    local 'y' (v 'origin y')
  }
  local 'optimize' (booleanConstant false)
  repeat (absoluteValue height) {
    local 'line' ('_readLineBMP' filename width bpp)
    if optimize {
      local 'rep' 1
      local 'lastColor' (at 1 line)
      for x (size line) {
        if ((at x line) != lastColor) {
          if (rep > 1) {
            '[tft:line]' (((x - 1) - rep) + (v 'origin x')) y ((x - 0) + (v 'origin x')) y lastColor
          } else {
            '[tft:setPixel]' ((x - 1) + (v 'origin x')) y lastColor
          }
          lastColor = (at x line)
          rep = 1
        } else {
          rep += 1
        }
      }
      '[tft:line]' ((x - rep) + (v 'origin x')) y (x + (v 'origin x')) y lastColor
    } else {
      for x (size line) {
        '[tft:setPixel]' ((x - 1) + (v 'origin x')) y (at x line)
      }
    }
    if (height >= 0) {
      y += -1
    } else {
      y += 1
    }
  }
}

to '_ignoreBMP' bytes filename {
  return ('[file:readInto]' ('[data:newByteArray]' bytes) filename)
}

to '_read 2 bytes pixel from' data i {
  local 'pixel' (((at (i + 1) data) << 8) | (at (i + 0) data))
  if ((v '_bmp rgb565') == 0) {
    local 'r' ((pixel >> 7) & 248)
    local 'g' ((pixel >> 2) & 248)
    local 'b' ((pixel & 31) << 3)
  } else {
    local 'r' ((pixel >> 8) & 248)
    local 'g' ((pixel >> 3) & 248)
    local 'b' ((pixel & 31) << 3)
  }
  return ((r << 16) | ((g << 8) | b))
}

to '_read 3 bytes pixel from' data i {
  return ((((at (i + 2) data) << 16) | ((at (i + 1) data) << 8)) | (at i data))
}

to '_read int16 of BMP file' filename {
  local 'data' ('[file:readBytes]' 2 filename)
  return (((at 2 data) << 8) | (at 1 data))
}

to '_read int32 of BMP file' filename {
  local 'data' ('[file:readBytes]' 4 filename)
  return ((((at 4 data) << 24) | ((at 3 data) << 16)) | (((at 2 data) << 8) | (at 1 data)))
}

to '_read palette entry of file' filename {
  local 'data' ('[file:readBytes]' 4 filename)
  return (((at 3 data) << 16) | (((at 2 data) << 8) | (at 1 data)))
}

to '_readLineBMP' filename width bpp {
  local 'result' ('[data:makeList]')
  local 'bytes' (((width * bpp) + 7) / 8)
  local 'data' ('[data:newByteArray]' bytes)
  bytes = ('[file:readInto]' data filename)
  i = 1
  repeatUntil (i > bytes) {
    if (bpp <= 8) {
      'read 1 byte pixels from' data i bpp result
    } (bpp == 16) {
      '[data:addLast]' ('_read 2 bytes pixel from' data i) result
    } else {
      '[data:addLast]' ('_read 3 bytes pixel from' data i) result
    }
    i += (maximum (bpp / 8) 1)
  }
  local 'mod4' ((size data) % 4)
  if (mod4 != 0) {
    '_ignoreBMP' (4 - mod4) filename
  }
  return result
}

to drawBMPfile filename 'origin x' 'origin y' {
  '[file:open]' filename
  if ('_checkBMP' filename) {
    '_ignoreBMP' 8 filename
    local 'start' ('_read int32 of BMP file' filename)
    '_ignoreBMP' 4 filename
    local 'width' ('_read int32 of BMP file' filename)
    local 'height' ('_read int32 of BMP file' filename)
    '_ignoreBMP' 2 filename
    local 'bpp' ('_read int16 of BMP file' filename)
    local 'compression' ('_read int32 of BMP file' filename)
    '_bmp rgb565' = compression
    '_ignoreBMP' 20 filename
    if (compression == 3) {
      '_ignoreBMP' 12 filename
    } (compression != 0) {
      sayIt 'Compressed BMP files are not supported'
      return 0
    }
    if (bpp <= 8) {
      comment 'Read color palette'
      '_bmp palette' = (newList (1 << bpp))
      sayIt ('[file:readPosition]' filename)
      for i (size (v '_bmp palette')) {
        atPut i (v '_bmp palette') ('_read palette entry of file' filename)
      }
    }
    '[file:open]' filename
    '_ignoreBMP' start filename
    '_drawBMP from' filename width height bpp (v 'origin x') (v 'origin y')
  }
  '[file:close]' filename
}

to 'read 1 byte pixels from' data i bpp buf {
  local 'mask' ((1 << bpp) - 1)
  local 'pixels' (at i data)
  local 'b' (8 / bpp)
  repeatUntil (b < 1) {
    b += -1
    '[data:addLast]' (at (((pixels >> (bpp * b)) & mask) + 1) (v '_bmp palette')) buf
  }
}

