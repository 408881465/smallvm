sharedVariables '_turtleScreenWidth' '_turtleScreenHeight' '_turtleX' '_turtleY' '_turtleHeading' '_turtlePenState' '_turtleColor'

spec ' ' 'initTurtle' 'init turtle screen w _ h _' 'auto auto' 128 128
spec ' ' 'home' 'home' ''
spec ' ' 'move' 'move _' 'auto' '10'
spec ' ' 'turnBy' 'turn _ degrees' 'auto' 90
spec ' ' 'turnFraction' 'turn _ / _ of circle' 'auto auto' 1 4
spec ' ' 'setHeading' 'point in direction  _' 'auto' 0
spec ' ' '_turtleNotes' '_turtleNotes'
spec ' ' 'pen down' 'pen down' ''
spec ' ' 'pen up' 'pen up' ''
spec ' ' 'set pen color to' 'set pen color to _' 'color'
spec 'r' '_tft color' '_tft color _ to number' 'color'
spec ' ' 'go to x' 'go to x _ y _' 'auto auto' '10' '10'
spec ' ' 'setPenToRandomColor' 'setPenToRandomColor' ''
spec ' ' 'clearDisplay' 'fill display with _' 'color'

to initTurtle w h {
  '[tft:enableDisplay]' true
  _turtleScreenWidth = w
  _turtleScreenHeight = h
  'set pen color to' (colorSwatch 7 255 1 255)
  home
  'pen up'
  mbDisplayOff
}

to home {
  'go to x' 0 0
  setHeading 0
}

to move n {
  local 'startX' (_turtleX >> 14)
  local 'startY' (_turtleY >> 14)
  comment 'The cosine is just the sine shifted by 90 degrees.'
  _turtleX += (n * ('[misc:sin]' (_turtleHeading + 9000)))
  _turtleY += (n * ('[misc:sin]' _turtleHeading))
  local 'endX' (_turtleX >> 14)
  local 'endY' (_turtleY >> 14)
  if _turtlePenState {
    '[tft:line]' startX startY endX endY _turtleColor
  }
}

to turnBy a {
  _turtleHeading += (a * 100)
  _turtleHeading = (_turtleHeading % 36000)
}

to turnFraction num denom {
  _turtleHeading += ((num * 36000) / denom)
  _turtleHeading = (_turtleHeading % 36000)
}

to setHeading a {
  _turtleHeading = ((a * 100) % 36000)
}

to '_turtleNotes' {
  comment 'Representation:
  _turtleHeading is in hundreths of a degree  (e.g. 4500 means 45 degrees)
  _turtleX and _turtleY are scaled by 16384 (2^14)

The sine function takes an angle in hundreds of a degree and returns a
number scaled by 16384. _turtleX and _turtleY are also scaled by 16384.
Those numbers are shifted right by 14 bits to get pixel locations.'
}

to 'pen down' {
  _turtlePenState = (booleanConstant true)
}

to 'pen up' {
  _turtlePenState = (booleanConstant false)
}

to 'set pen color to' color {
  _turtleColor = ('_tft color' color)
}

to '_tft color' 'color hex' {
  local 'r' (((((v 'color hex') >> 16) & 255) * 255) / 31)
  local 'g' (((((v 'color hex') >> 8) & 255) * 255) / 31)
  local 'b' ((((v 'color hex') & 255) * 255) / 31)
  return ((r << 16) | ((g << 8) | b))
}

to 'go to x' x y {
  local 'startX' (_turtleX >> 14)
  local 'startY' (_turtleY >> 14)
  _turtleX = (((_turtleScreenWidth / 2) + x) << 14)
  _turtleY = (((_turtleScreenHeight / 2) + y) << 14)
  local 'endX' (_turtleX >> 14)
  local 'endY' (_turtleY >> 14)
  if _turtlePenState {
    '[tft:line]' startX startY endX endY _turtleColor
  }
}

to setPenToRandomColor {
  local 'c1' (random 150 220)
  local 'c2' (random 0 ((3 * c1) / 4))
  local 'c3' (random 0 ((3 * c1) / 4))
  local 'which' (random 1 3)
  if (1 == which) {
    _turtleColor = ((c1 << 16) | ((c2 << 8) | c3))
  } (2 == which) {
    _turtleColor = ((c2 << 16) | ((c3 << 8) | c1))
  } else {
    _turtleColor = ((c3 << 16) | ((c1 << 8) | c2))
  }
}

to clearDisplay color {
  '[tft:rect]' 0 0 _turtleScreenWidth _turtleScreenHeight ('_tft color' color) true
  comment 'Give the display controller time to finish this operation'
  waitMillis 1
}
